import{_ as o,C as i,c as l,o as c,a2 as a,G as d,w as r,a as h}from"./chunks/framework.DfL7K9Ap.js";const n="/assets/CommandPacket.46Ivz4K0.png",s="/assets/feedbackPacket.Dk0VS6dI.png",P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"actuator/Mini12Lf/Manual/12Lf_IRProtocol.md","filePath":"actuator/Mini12Lf/Manual/12Lf_IRProtocol.md","lastUpdated":null}'),m={name:"actuator/Mini12Lf/Manual/12Lf_IRProtocol.md"};function b(F,t,x,k,u,D){const e=i("font");return c(),l("div",null,[t[3]||(t[3]=a('<h2 id="_1-개요" tabindex="-1">1 개요 <a class="header-anchor" href="#_1-개요" aria-label="Permalink to &quot;1 개요&quot;">​</a></h2><p>mightyZAP을 제어하기 위해서는 Protocol에 맞추어 통신을 해야하며, mightyZAP에서는 제어를 위한 전용 IR Protocol을 제공하고 있습니다.<br> IR Protocol 을 지원하는 모델은 아래와 같습니다.</p><ul><li>D7/D12 Series</li><li>L12 Series</li><li>12Lf Series</li></ul><h3 id="_1-2-packet-description" tabindex="-1">1.2 Packet Description <a class="header-anchor" href="#_1-2-packet-description" aria-label="Permalink to &quot;1.2 Packet Description&quot;">​</a></h3><h4 id="_1-2-1-command-packet" tabindex="-1">1.2.1 Command Packet <a class="header-anchor" href="#_1-2-1-command-packet" aria-label="Permalink to &quot;1.2.1 Command Packet&quot;">​</a></h4><p>mightyZAP에 동작을 수행할 수 있는 명령 Packet으로 다음과 같은 구조와 요소로 이루어져 있습니다. <strong>Structure</strong><img src="'+n+'" alt="commandPacket"><strong>Element</strong></p><table><thead><tr><th>Index</th><th>Data</th><th>설명</th></tr></thead><tbody><tr><td>0</td><td>Start Bytes 1</td><td>시작 바이트 1 (0xFF)</td></tr><tr><td>1</td><td>Start Bytes 2</td><td>시작 바이트 2 (0xFF)</td></tr><tr><td>2</td><td>Start Bytes 3</td><td>시작 바이트 3 (0xFF)</td></tr><tr><td>3</td><td>ID</td><td>Servo ID (범위 0 ~253, Broadcast ID:254)</td></tr><tr><td>4</td><td>SIZE</td><td>Packet Size (COMMAND+FACTOR+CHECKSUM)</td></tr><tr><td>5</td><td>COMMAND</td><td>Instruction</td></tr><tr><td>5+1</td><td>FACTOR 1</td><td>첫 번째 Parameter</td></tr><tr><td>5+m</td><td>FACTOR M</td><td>m 번째 Parameter</td></tr><tr><td>5+N</td><td>FACTOR N</td><td>마지막 Parameter</td></tr><tr><td>5+N+1</td><td>Check Sum</td><td>Check Sum = 0xff – ( LOWER_BYTE( ID + SIZE + COMMAND + FACTOR 1 + … + FACTOR N ) )</td></tr></tbody></table><p><strong>Element Descroption</strong></p><ol><li>Header (3 Bytes) <ul><li>Packet 시작을 인식하는 코드로 0xFFFFFF</li><li>Packet중 유일한 조합</li></ul></li><li>ID (1 Byte) <ul><li>MightyZAP의 다중연결 방식으로 Daisy Chain연결을 지원하기 위한 식별자</li><li>공장 초기값 ID : ID 0</li><li>ID = 0 ~253 일 때, 미리 저장된 ID와 비교하여 선별적으로 동작함</li><li>ID = 254 (0xFE) 일 때, Broadcasting Mode로 동작하며 Feedback Packet은 동작하지 않음</li></ul></li><li>SIZE (1 Byte) <ul><li>Packet의 Byte단위로 계산된 길이.</li><li>SIZE데이터 이후에 발송할 데이터의 크기 (COMMAND + FACTOR + CHECKSUM)</li><li>즉, FACTOR의 Byte수에 2를 더한 수</li></ul></li><li>COMMAND (1 Byte) <ul><li>Packet의 발송 목적을 정의하는 명령 코드</li></ul></li></ol><table><thead><tr><th>Function</th><th>CODE</th><th>Description</th></tr></thead><tbody><tr><td>Echo</td><td>0xF1</td><td>Feedback Packet수신</td></tr><tr><td>Load Data</td><td>0xF2</td><td>Address를 보내고 Data를 Feedback 받음</td></tr><tr><td>Store Data</td><td>0xF3</td><td>Address와 Data를 보내고 저장</td></tr><tr><td>Send Data</td><td>0xF4</td><td>Address와 Data를 발송하여 임시 보관시킴</td></tr><tr><td>Excution</td><td>0xF5</td><td>Send Data를 통한 임시보관 정보를 실행시킴</td></tr><tr><td>Factory Reset</td><td>0xF6</td><td>공장 출하 상태인 기본 파라미터로 리셋</td></tr><tr><td>Restart</td><td>0xF8</td><td>mightyZAP 시스템 재시작</td></tr><tr><td>Symmetric Store</td><td>0x73</td><td>다수 mightyZAP의 동일한 Address에 Data를 저장</td></tr></tbody></table><ol start="5"><li>FACTOR <ul><li>COMMAND에 따른 추가 Packet 요소</li></ul></li><li>CHECKSUM Packet의 데이터 누락 및 변조가 생겼는지 확인 하기 위한 검증 데이터이며 다음과 같은 관계식으로 생성됩니다 <ul><li>Checksum = 0xff – ( LOWER_BYTE( ID + SIZE + COMMAND + FACTOR 1 + … + FACTOR N ) )</li><li>LOWER_BYTE = 합산된 Data 값 중 하위 1byte만 취합니다. = 합산된 Data 값을 0x100으로 나누어 나머지만 취합니다.</li><li>설명에 대한 공식은 아래와 같습니다. LOWER_BYTE( ID + SIZE + COMMAND + FACTOR 1 + ... + FACTOR N ) == ( ID + SIZE + COMMAND + FACTOR 1 + ... + FACTOR N ) % 0x100</li></ul></li></ol><h4 id="_1-2-2-feedback-packet" tabindex="-1">1.2.2 Feedback Packet <a class="header-anchor" href="#_1-2-2-feedback-packet" aria-label="Permalink to &quot;1.2.2 Feedback Packet&quot;">​</a></h4><p>Command Packet 을 수신한 액츄에이터가 요청 정보를 포함한 회신을 하는 Packet 으로 다음과 같은 구조와 요소로 이루어져 있습니다.<br><strong>Structure</strong><br><img src="'+s+'" alt="feedbackPacket"><strong>Element</strong></p><table><thead><tr><th>Index</th><th>Data</th><th>설명</th></tr></thead><tbody><tr><td>0</td><td>Start Bytes 1</td><td>시작 바이트 1 (0xFF)</td></tr><tr><td>1</td><td>Start Bytes 2</td><td>시작 바이트 2 (0xFF)</td></tr><tr><td>2</td><td>Start Bytes 3</td><td>시작 바이트 3 (0xFF)</td></tr><tr><td>3</td><td>ID</td><td>Servo ID (범위 0 ~253, Broadcast ID:254)</td></tr><tr><td>4</td><td>SIZE</td><td>Packet Size (COMMAND + FACTOR + CHECKSUM)</td></tr><tr><td>5</td><td>ERROR</td><td>Error Code</td></tr><tr><td>5+1</td><td>FACTOR 1</td><td>첫 번째 Parameter</td></tr><tr><td>5+m</td><td>FACTOR M</td><td>m 번째 Parameter</td></tr><tr><td>5+N</td><td>FACTOR N</td><td>마지막 Parameter</td></tr><tr><td>5+N+1</td><td>Check Sum</td><td>Check Sum = 0xff – ( LOWER_BYTE( ID + SIZE + COMMAND + FACTOR 1 + … + FACTOR N ) )</td></tr></tbody></table><p><strong>Element Descroption</strong></p><ol><li>Header (3 Bytes) <ul><li>Packet 시작을 인식하는 코드로 0xFFFFFF</li><li>Packet중 유일한 조합</li></ul></li><li>ID (1 Byte) <ul><li>MightyZAP의 개별로 저장된 ID (0~253)</li></ul></li><li>SIZE (1 Byte) <ul><li>Packet의 Byte단위로 계산된 길이.</li><li>SIZE데이터 이후에 발송할 데이터의 크기 (COMMAND + FACTOR + CHECKSUM)</li><li>즉, FACTOR의 Byte수에 2를 더한 수</li></ul></li><li>COMMAND (1 Byte) <ul><li>bit별로 동작 중에 발생한 오류 상태 표시</li></ul></li></ol><table><thead><tr><th>Error</th><th>bit</th><th>Description</th><th>LED 표시</th></tr></thead><tbody><tr><td>Overload Error</td><td>5</td><td>F지정된 최대 Force로 현재의 하중을 제어할 수 없을 때 1로 설정됨</td><td>Red 점멸</td></tr><tr><td>Input voltage Error</td><td>0</td><td>인가된 전압이 Control Table에 설정된 동작전압 범위를 벗어났을 경우 1로 설정됨</td><td>Red 점등</td></tr></tbody></table><ol start="5"><li>FACTOR <ul><li>COMMAND에 따른 추가 Packet 요소</li></ul></li><li>CHECKSUM Packet의 데이터 누락 및 변조가 생겼는지 확인 하기 위한 검증 데이터이며 다음과 같은 관계식으로 생성됩니다 <ul><li>Checksum = 0xff – ( LOWER_BYTE( ID + SIZE + COMMAND + FACTOR 1 + … + FACTOR N ) )</li><li>LOWER_BYTE = 합산된 Data 값 중 하위 1byte만 취합니다. = 합산된 Data 값을 0x100으로 나누어 나머지만 취합니다.</li><li>설명에 대한 공식은 아래와 같습니다. LOWER_BYTE( ID + SIZE + COMMAND + FACTOR 1 + ... + FACTOR N ) == ( ID + SIZE + COMMAND + FACTOR 1 + ... + FACTOR N ) % 0x100</li></ul></li></ol><h2 id="_2-instruction-종류" tabindex="-1">2 Instruction 종류 <a class="header-anchor" href="#_2-instruction-종류" aria-label="Permalink to &quot;2 Instruction 종류&quot;">​</a></h2><h3 id="_2-1-echo" tabindex="-1">2.1 Echo <a class="header-anchor" href="#_2-1-echo" aria-label="Permalink to &quot;2.1 Echo&quot;">​</a></h3><p>단순한 Feedback Packet수신하는 명령으로 mightyZAP과의 통신 상태 확인으로 사용됩니다.</p><h4 id="_2-1-1-예제" tabindex="-1">2.1.1 예제 <a class="header-anchor" href="#_2-1-1-예제" aria-label="Permalink to &quot;2.1.1 예제&quot;">​</a></h4><p>ID &#39;0&#39;번인 mightyZAP과의 연결 상태 확인</p><h5 id="_2-1-1-1-command-packet" tabindex="-1">2.1.1.1 Command Packet <a class="header-anchor" href="#_2-1-1-1-command-packet" aria-label="Permalink to &quot;2.1.1.1 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x02</td><td>0xF1</td><td>0x0c</td></tr></tbody></table><h5 id="_2-1-1-1-feedback-packet" tabindex="-1">2.1.1.1 Feedback Packet <a class="header-anchor" href="#_2-1-1-1-feedback-packet" aria-label="Permalink to &quot;2.1.1.1 Feedback Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x02</td><td>0x00</td><td>0xFD</td></tr></tbody></table><h3 id="_2-2-factory-reset" tabindex="-1">2.2 Factory Reset <a class="header-anchor" href="#_2-2-factory-reset" aria-label="Permalink to &quot;2.2 Factory Reset&quot;">​</a></h3><p>mightyZAP의 파라미터(Memory 및 Parameter)를 기본값(Default)으로 변경하고 Option 에 따라 추가로 리셋여부를 결정하여 초기화 수행합니다. mightyZAP을 리셋하기 위해서는 아래의 Option Data를 설정해야 합니다.</p><ul><li>해당 bit 가 &#39;1&#39;이면 Reset, &#39;0&#39;이면 Hold</li></ul><table><thead><tr><th>Option</th><th>Bit</th><th>리셋 동작</th></tr></thead><tbody><tr><td>Servo ID</td><td>0</td><td>mightyZAP ID를 0으로 초기화</td></tr><tr><td>Baudrate</td><td>1</td><td>통신 속도를 32(57600 bps)로 설정</td></tr></tbody></table><h4 id="_2-2-1-예제" tabindex="-1">2.2.1 예제 <a class="header-anchor" href="#_2-2-1-예제" aria-label="Permalink to &quot;2.2.1 예제&quot;">​</a></h4><p>ID &#39;1&#39;번인 mightyZAP의ID 는 0(ID Default)으로 초기화하고 Baud Rate 는 현재 상태 유지하여 초기화 수행</p><h5 id="_2-2-2-1-command-packet" tabindex="-1">2.2.2.1 Command Packet <a class="header-anchor" href="#_2-2-2-1-command-packet" aria-label="Permalink to &quot;2.2.2.1 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor<br>(option)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x03</td><td>0xF6</td><td>0x01</td><td>0x04</td></tr></tbody></table><h5 id="_2-2-2-1-feedback-packet" tabindex="-1">2.2.2.1 Feedback Packet <a class="header-anchor" href="#_2-2-2-1-feedback-packet" aria-label="Permalink to &quot;2.2.2.1 Feedback Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x02</td><td>0x00</td><td>0xFD</td></tr></tbody></table><h3 id="_2-3-restart" tabindex="-1">2.3 Restart <a class="header-anchor" href="#_2-3-restart" aria-label="Permalink to &quot;2.3 Restart&quot;">​</a></h3><p>mightyZAP의 시스템을 재 시작 합니다. Overload Shutdown 해지 등 시스템 재 시작이 필요한 경우 실행합니다.</p>',39)),d(e,{color:"#ff0000"},{default:r(()=>t[0]||(t[0]=[h("Feedback Return Mode 2 에서만 Feedback 을 보냅니다. ")])),_:1,__:[0]}),t[4]||(t[4]=a('<h4 id="_2-3-1-예제" tabindex="-1">2.3.1 예제 <a class="header-anchor" href="#_2-3-1-예제" aria-label="Permalink to &quot;2.3.1 예제&quot;">​</a></h4><p>ID &#39;0&#39;번인 mightyZAP의 시스템 재 시작</p><h5 id="_2-3-1-1-command-packet" tabindex="-1">2.3.1.1 Command Packet <a class="header-anchor" href="#_2-3-1-1-command-packet" aria-label="Permalink to &quot;2.3.1.1 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x02</td><td>0xF8</td><td>0x05</td></tr></tbody></table><h5 id="_2-3-1-1-feedback-packet" tabindex="-1">2.3.1.1 Feedback Packet <a class="header-anchor" href="#_2-3-1-1-feedback-packet" aria-label="Permalink to &quot;2.3.1.1 Feedback Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x02</td><td>0xF8</td><td>0x05</td></tr></tbody></table><h3 id="_2-4-store-data" tabindex="-1">2.4 Store Data <a class="header-anchor" href="#_2-4-store-data" aria-label="Permalink to &quot;2.4 Store Data&quot;">​</a></h3><p>mightyZAP의 ID변경, 위치이동, Force limit, Stroke limit, Speed, Force On/Off 등 설정을 위해 Address와 Data 를 보내고 저장합니다.</p>',8)),d(e,{color:"#ff0000"},{default:r(()=>t[1]||(t[1]=[h("Feedback Return Mode 2 에서만 Feedback 을 보냅니다. ")])),_:1,__:[1]}),t[5]||(t[5]=a('<h4 id="_2-4-1-id-변경" tabindex="-1">2.4.1 ID 변경 <a class="header-anchor" href="#_2-4-1-id-변경" aria-label="Permalink to &quot;2.4.1 ID  변경&quot;">​</a></h4><h5 id="_2-4-1-1-description" tabindex="-1">2.4.1.1 Description <a class="header-anchor" href="#_2-4-1-1-description" aria-label="Permalink to &quot;2.4.1.1 Description&quot;">​</a></h5><p>12Lf Model의 ID 를 ID‘0’번에서 ‘1&#39;로 지정하는 명령 패킷</p><ul><li>ID : 대상 mightyZAP의 ID</li><li>Command : 시작 Address 부터 Data 를 차례대로 각각의 address 에 저장</li><li>Address : 12Lf Modeldml Data Map 에 명시된 ID 가 저장되는 Address</li><li>Data : 변경하고 싶은 Servo ID (address 0x03 에 0x01)</li></ul><h5 id="_2-4-1-2-command-packet" tabindex="-1">2.4.1.2 Command Packet <a class="header-anchor" href="#_2-4-1-2-command-packet" aria-label="Permalink to &quot;2.4.1.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0xF3</td><td>0x03</td><td>0x01</td><td>0x04</td></tr></tbody></table><h4 id="_2-4-2-목표-위치-변경" tabindex="-1">2.4.2 목표 위치 변경 <a class="header-anchor" href="#_2-4-2-목표-위치-변경" aria-label="Permalink to &quot;2.4.2 목표 위치 변경&quot;">​</a></h4><h5 id="_2-4-2-1-description" tabindex="-1">2.4.2.1 Description <a class="header-anchor" href="#_2-4-2-1-description" aria-label="Permalink to &quot;2.4.2.1 Description&quot;">​</a></h5><p>12Lf mightyZAP의 목표 위치 값을 2047(0x07FF)으로 지정하는 명령 패킷</p><ul><li>ID : 대상 mightyZAP ID</li><li>Command : 시작 Address 부터 Data 를 차례대로 각각의 address 에 저장</li><li>Address : 12Lf Modeldml Data Map 에 명시된 목표 위치 값이 저장되는 Address</li><li>Data #1 : 변경하고 싶은 목표 위치 값의 하위 byte (address 0x86 에 0xFF)</li><li>Data #2 : 변경하고 싶은 목표 위치 값의 상위 byte (address 0x87 에 0x07) ※목표 위치 값 Hex 변환(10 진수à16 진수) : 204 -&gt; 0x07FF</li></ul><h5 id="_2-4-2-2-command-packet" tabindex="-1">2.4.2.2 Command Packet <a class="header-anchor" href="#_2-4-2-2-command-packet" aria-label="Permalink to &quot;2.4.2.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Factor #3<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x05</td><td>0xF3</td><td>0x86</td><td>0xFF</td><td>0x07</td><td>0x7A</td></tr></tbody></table><h4 id="_2-4-3-goal-speed" tabindex="-1">2.4.3 Goal Speed <a class="header-anchor" href="#_2-4-3-goal-speed" aria-label="Permalink to &quot;2.4.3 Goal Speed&quot;">​</a></h4><h5 id="_2-4-3-1-description" tabindex="-1">2.4.3.1 Description <a class="header-anchor" href="#_2-4-3-1-description" aria-label="Permalink to &quot;2.4.3.1 Description&quot;">​</a></h5><p>12Lf mightyZAP의 Goal Speed 를 512(0x0200)로 지정하는 명령 패킷</p><ul><li>ID : 대상 mightyZAP ID</li><li>Command : 시작 Address 부터 Data 를 차례대로 각각의 address 에 저장</li><li>Address : 12Lf Modeldml Data Map 에 명시된 Goal Speed 값이 저장되는 Address</li><li>Data #1 : 변경하고 싶은 Goal Speed 값의 하위 byte (address 0x15 에 0x00)</li><li>Data #2 : 변경하고 싶은 Goal Speed 값의 상위 byte (address 0x16 에 0x02) ※Goal Speed값 Hex 변환(10진수à16진수): 512à0x0200</li></ul><h5 id="_2-4-3-2-command-packet" tabindex="-1">2.4.3.2 Command Packet <a class="header-anchor" href="#_2-4-3-2-command-packet" aria-label="Permalink to &quot;2.4.3.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Factor #3<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x05</td><td>0xF3</td><td>0x88</td><td>0x00</td><td>0x02</td><td></td></tr></tbody></table><h4 id="_2-4-4-goal-current" tabindex="-1">2.4.4 Goal Current <a class="header-anchor" href="#_2-4-4-goal-current" aria-label="Permalink to &quot;2.4.4 Goal Current&quot;">​</a></h4><h5 id="_2-4-4-1-description" tabindex="-1">2.4.4.1 Description <a class="header-anchor" href="#_2-4-4-1-description" aria-label="Permalink to &quot;2.4.4.1 Description&quot;">​</a></h5><p>12Lf mightyZAP의 Goal Current 를800(0x0320)으로 지정하는 명령 패킷</p><ul><li>ID : 대상 mightyZAP ID</li><li>Command : 시작 Address 부터 Data 를 차례대로 각각의 address 에 저장</li><li>Address : 12Lf Modeldml Data Map 에 명시된 Goal Current 값이 저장되는 Address</li><li>Data #1 : 변경하고 싶은 Goal Current 값의 하위 byte (address 0x34 에 0x20)</li><li>Data #2 : 변경하고 싶은 Goal Current 값의 상위 byte (address 0x35 에 0x03) ※Goal Current값 Hex 변환(10진수-&gt;16진수) : 800-&gt;0x0320</li></ul><h5 id="_2-4-4-2-command-packet" tabindex="-1">2.4.4.2 Command Packet <a class="header-anchor" href="#_2-4-4-2-command-packet" aria-label="Permalink to &quot;2.4.4.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Factor #3<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x05</td><td>0xF3</td><td>0x88</td><td>0x00</td><td>0x02</td><td></td></tr></tbody></table><h4 id="_2-4-5-goal-current" tabindex="-1">2.4.5 Goal Current <a class="header-anchor" href="#_2-4-5-goal-current" aria-label="Permalink to &quot;2.4.5 Goal Current&quot;">​</a></h4><h5 id="_2-4-5-1-description" tabindex="-1">2.4.5.1 Description <a class="header-anchor" href="#_2-4-5-1-description" aria-label="Permalink to &quot;2.4.5.1 Description&quot;">​</a></h5><p>12Lf mightyZAP의 수축방향 한계위치 값(short stroke limit)을100(0x0064)으로 지정하는 명령패킷</p><ul><li>ID : 대상 mightyZAP ID</li><li>Command : 시작 Address 부터 Data 를 차례대로 각각의 address 에 저장</li><li>Address : 12Lf Modeldml Data Map 에 명시된 수축방향 한계 위치 값이 저장되는 Address</li><li>Data #1 : 변경하고 싶은 목표 수축방향 한계 위치 값의 하위 byte (address 0x06 에 0x64)</li><li>Data #2 : 변경하고 싶은 목표 수축방향 한계 위치 값의 상위 byte (address 0x07 에 0x00) ※목표 스트로크 리미트 값 Hex 변환(10 진수-&gt;16 진수) : 100 -&gt; 0x0064</li></ul><h5 id="_2-4-5-2-command-packet" tabindex="-1">2.4.5.2 Command Packet <a class="header-anchor" href="#_2-4-5-2-command-packet" aria-label="Permalink to &quot;2.4.5.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Factor #3<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x05</td><td>0xF3</td><td>0x06</td><td>0x64</td><td>0x00</td><td>0x9C</td></tr></tbody></table><h4 id="_2-4-6-force-on-off" tabindex="-1">2.4.6 Force On/Off <a class="header-anchor" href="#_2-4-6-force-on-off" aria-label="Permalink to &quot;2.4.6 Force On/Off&quot;">​</a></h4><h5 id="_2-4-6-1-description" tabindex="-1">2.4.6.1 Description <a class="header-anchor" href="#_2-4-6-1-description" aria-label="Permalink to &quot;2.4.6.1 Description&quot;">​</a></h5><p>12Lf mightyZAP의 모터 기동력을 끄는 명령 패킷</p><ul><li>ID : 대상 mightyZAP ID</li><li>Command : 시작 Address 부터 Data 를 차례대로 각각의 address 에 저장</li><li>Address : 12Lf Modeldml Data Map 에 명시된 Force 를 On/Off 하는 값이 저장되는 Address</li><li>Data : Servo Motor 의 Force 를 On/Off 할 Data byte (address0x80 에 0x00(Off) / 0x01(On))</li><li>Force off 후 다음 위치 명령을 내리면 자동으로 Force on 됩니다.</li></ul><h5 id="_2-4-6-2-command-packet" tabindex="-1">2.4.6.2 Command Packet <a class="header-anchor" href="#_2-4-6-2-command-packet" aria-label="Permalink to &quot;2.4.6.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x04</td><td>0xF3</td><td>0x80</td><td>0x00</td><td>0x87</td></tr></tbody></table><h4 id="_2-4-7-feedback-return-mode" tabindex="-1">2.4.7 Feedback Return Mode <a class="header-anchor" href="#_2-4-7-feedback-return-mode" aria-label="Permalink to &quot;2.4.7 Feedback Return Mode&quot;">​</a></h4><h5 id="_2-4-7-1-description" tabindex="-1">2.4.7.1 Description <a class="header-anchor" href="#_2-4-7-1-description" aria-label="Permalink to &quot;2.4.7.1 Description&quot;">​</a></h5><p>12Lf mightyZAP가 모든 명령에 대해 Feedback Packet을 전송하게 하는 명령 패킷</p><ul><li>ID : 대상 mightyZAP ID</li><li>Command : 시작 Address 부터 Data 를 차례대로 각각의 address 에 저장</li><li>Address : 12Lf Modeldml Data Map 에 명시된 Feedback Return Mode 를 설정하는 값이 저장되는 Address</li><li>Data : Feedback Return Mode Data (address 0x10 에 0x02) 1 : Load Data(0xF3) Command 에만 Feeadback Packet 을 전송 2 : 모든 Command 에 대해 Feeadback Packet 을 전송)</li></ul><h5 id="_2-4-7-2-command-packet" tabindex="-1">2.4.7.2 Command Packet <a class="header-anchor" href="#_2-4-7-2-command-packet" aria-label="Permalink to &quot;2.4.7.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x04</td><td>0xF3</td><td>0x10</td><td>0x02</td><td>0xF5</td></tr></tbody></table><h3 id="_2-5-load-data" tabindex="-1">2.5 Load Data <a class="header-anchor" href="#_2-5-load-data" aria-label="Permalink to &quot;2.5 Load Data&quot;">​</a></h3><p>mightyZAP의 Address 를 보내고 Data 를 Feedback 받습니다..</p><h4 id="_2-5-1-present-position" tabindex="-1">2.5.1 Present Position <a class="header-anchor" href="#_2-5-1-present-position" aria-label="Permalink to &quot;2.5.1 Present Position&quot;">​</a></h4><h5 id="_2-5-1-1-description" tabindex="-1">2.5.1.1 Description <a class="header-anchor" href="#_2-5-1-1-description" aria-label="Permalink to &quot;2.5.1.1 Description&quot;">​</a></h5><p>12Lf Model의 I현재 위치값을 읽어 오는 명령 패킷</p><h5 id="_2-5-1-2-command-packet" tabindex="-1">2.5.1.2 Command Packet <a class="header-anchor" href="#_2-5-1-2-command-packet" aria-label="Permalink to &quot;2.5.1.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Length)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0xf2</td><td>0x8C</td><td>0x02</td><td>0x7B</td></tr></tbody></table><ul><li>ID : 대상 mightyZAP의 ID</li><li>Command : 시작 Address 부터 Data 를 차례대로 각각의 address 에 저장</li><li>Address : 12Lf Modeldml Data Map 에 명시된 현재 위치 값이 저장된 Address</li><li>Length : Address 로 부터 읽어올 Byte 의 수(mightyZAP 위치 값은 2byte 로 이루어져 있습니다.)</li></ul><h5 id="_2-5-1-3-feeback-packet" tabindex="-1">2.5.1.3 Feeback Packet <a class="header-anchor" href="#_2-5-1-3-feeback-packet" aria-label="Permalink to &quot;2.5.1.3 Feeback Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Factor #1</th><th>Factor #2</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0x00</td><td>0xFF</td><td>0x07</td><td>0xF5</td></tr></tbody></table><ul><li>ID : mightyZAP ID</li><li>Error : 동작 중에 발생한 요류 상태 표시</li><li>Factor 1 : 현재 위치 값 하위 byte (ex&gt; 0xff)</li><li>Factor 2 : 현재 위치 값 상위 byte (ex&gt; 0x07) ※ 현재 위치 값 Hex 변환(16 진수à10 진수) : 0x07ff -&gt; 2047</li></ul><h4 id="_2-5-2-present-motor-operating-rate" tabindex="-1">2.5.2 Present Motor Operating Rate <a class="header-anchor" href="#_2-5-2-present-motor-operating-rate" aria-label="Permalink to &quot;2.5.2 Present Motor Operating Rate&quot;">​</a></h4><h5 id="_2-5-2-1-description" tabindex="-1">2.5.2.1 Description <a class="header-anchor" href="#_2-5-2-1-description" aria-label="Permalink to &quot;2.5.2.1 Description&quot;">​</a></h5><p>12Lf Model의 현재 Operating Rate 값을 읽어 오는 명령 패킷</p><h5 id="_2-5-2-2-command-packet" tabindex="-1">2.5.2.2 Command Packet <a class="header-anchor" href="#_2-5-2-2-command-packet" aria-label="Permalink to &quot;2.5.2.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Length)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0xF2</td><td>0x90</td><td>0x02</td><td>0x77</td></tr></tbody></table><ul><li>ID : 대상 mightyZAP의 ID</li><li>Command : 시작 Address 부터 Data 를 차례대로 각각의 address 에 저장</li><li>Address : 12Lf Modeldml Data Map 에 명시된 현재 Motor operating rate 값이 저장된 Address</li><li>Length : Address 로 부터 읽어올 Byte 의 수(mightyZAP Present Motor Operating Rate 값은 2byte 로 이루어져 있습니다.)</li></ul><h5 id="_2-5-2-3-feeback-packet" tabindex="-1">2.5.2.3 Feeback Packet <a class="header-anchor" href="#_2-5-2-3-feeback-packet" aria-label="Permalink to &quot;2.5.2.3 Feeback Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Factor #1</th><th>Factor #2</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0x00</td><td>0xFF</td><td>0x03</td><td>0xF9</td></tr></tbody></table><ul><li>ID : mightyZAP ID</li><li>Error : 동작 중에 발생한 요류 상태 표시</li><li>Factor 1 : 현재 Motor operating rate 값 하위 byte (ex&gt; 0xff)</li><li>Factor 2 : 현재 Motor operating rate 값 상위 byte (ex&gt; 0x03) ※ 현재 Load 값 Hex 변환(16 진수à10 진수) : 0x03ff -&gt; 1023</li></ul><h4 id="_2-5-3-present-voltage" tabindex="-1">2.5.3 Present Voltage <a class="header-anchor" href="#_2-5-3-present-voltage" aria-label="Permalink to &quot;2.5.3 Present Voltage&quot;">​</a></h4><h5 id="_2-5-3-1-description" tabindex="-1">2.5.3.1 Description <a class="header-anchor" href="#_2-5-3-1-description" aria-label="Permalink to &quot;2.5.3.1 Description&quot;">​</a></h5><p>12Lf Model의 현재 Voltage값을 읽어 오는 명령 패킷</p><h5 id="_2-5-3-2-command-packet" tabindex="-1">2.5.3.2 Command Packet <a class="header-anchor" href="#_2-5-3-2-command-packet" aria-label="Permalink to &quot;2.5.3.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Length)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0xF2</td><td>0x92</td><td>0x01</td><td>0x76</td></tr></tbody></table><ul><li>ID : 대상 mightyZAP의 ID</li><li>Command : 시작 Address 부터 Data 를 차례대로 각각의 address 에 저장</li><li>Address : 12Lf Modeldml Data Map 에 명시된 현재 Voltage 값이 저장된 Address</li><li>Length : Address 로 부터 읽어올 Byte 의 수(mightyZAP Voltage 값은 1byte 로 이루어져 있습니다.)</li></ul><h5 id="_2-5-3-3-feeback-packet" tabindex="-1">2.5.3.3 Feeback Packet <a class="header-anchor" href="#_2-5-3-3-feeback-packet" aria-label="Permalink to &quot;2.5.3.3 Feeback Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Factor #1</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x03</td><td>0x00</td><td>0x7B</td><td>0x81</td></tr></tbody></table><ul><li>ID : mightyZAP ID</li><li>Error : 동작 중에 발생한 요류 상태 표시</li><li>Factor 1 : 현재 Voltage 치 값 byte (ex&gt; 0x7B) ※ 현재 Load 값 Hex 변환(16 진수 -&gt; 10 진수) : 0x7B -&gt; 123(12.3V)</li></ul><h3 id="_2-6-send-data" tabindex="-1">2.6 Send Data <a class="header-anchor" href="#_2-6-send-data" aria-label="Permalink to &quot;2.6 Send Data&quot;">​</a></h3><p>mightyZAP의 Address와 Data를 임시 보관 시킵니다.</p><h4 id="_2-6-1-gaol-position" tabindex="-1">2.6.1 Gaol Position <a class="header-anchor" href="#_2-6-1-gaol-position" aria-label="Permalink to &quot;2.6.1 Gaol Position&quot;">​</a></h4><h5 id="_2-6-1-1-description" tabindex="-1">2.6.1.1 Description <a class="header-anchor" href="#_2-6-1-1-description" aria-label="Permalink to &quot;2.6.1.1 Description&quot;">​</a></h5><p>12Lf Model의 목표 위치 값 2047(0x07FF)을 임시 보관하는 명령 패킷</p><h5 id="_2-6-1-2-command-packet" tabindex="-1">2.6.1.2 Command Packet <a class="header-anchor" href="#_2-6-1-2-command-packet" aria-label="Permalink to &quot;2.6.1.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data 1)</th><th>Factor #2<br>(Data 2)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x05</td><td>0xF4</td><td>0x86</td><td>0xff</td><td>0x07</td><td>0x79</td></tr></tbody></table><h5 id="_2-6-1-3-feedback-packet" tabindex="-1">2.6.1.3 Feedback Packet <a class="header-anchor" href="#_2-6-1-3-feedback-packet" aria-label="Permalink to &quot;2.6.1.3 Feedback Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x02</td><td>0x00</td><td>0xFC</td></tr></tbody></table><h3 id="_2-7-excution" tabindex="-1">2.7 Excution <a class="header-anchor" href="#_2-7-excution" aria-label="Permalink to &quot;2.7 Excution&quot;">​</a></h3><p>Send Data를 통한 임시 보관 정보를 실행시킴</p><h4 id="_2-7-1-example" tabindex="-1">2.7.1 Example <a class="header-anchor" href="#_2-7-1-example" aria-label="Permalink to &quot;2.7.1 Example&quot;">​</a></h4><h5 id="_2-7-1-1-description" tabindex="-1">2.7.1.1 Description <a class="header-anchor" href="#_2-7-1-1-description" aria-label="Permalink to &quot;2.7.1.1 Description&quot;">​</a></h5><p>임시 보관된 모든 정보를 동시에 실행시키는 명령 패킷</p>',85)),d(e,{color:"#ff0000"},{default:r(()=>t[2]||(t[2]=[h("Feedback Return Mode 2 에서만 Feedback 을 보냅니다. ")])),_:1,__:[2]}),t[6]||(t[6]=a('<h5 id="_2-7-1-2-command-packet" tabindex="-1">2.7.1.2 Command Packet <a class="header-anchor" href="#_2-7-1-2-command-packet" aria-label="Permalink to &quot;2.7.1.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x02</td><td>0xF5</td><td>0x07</td></tr></tbody></table><h5 id="_2-7-1-3-feedback-packet" tabindex="-1">2.7.1.3 Feedback Packet <a class="header-anchor" href="#_2-7-1-3-feedback-packet" aria-label="Permalink to &quot;2.7.1.3 Feedback Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x02</td><td>0x00</td><td>0xFC</td></tr></tbody></table><h3 id="_2-8-symmetric-store" tabindex="-1">2.8 Symmetric Store <a class="header-anchor" href="#_2-8-symmetric-store" aria-label="Permalink to &quot;2.8 Symmetric Store&quot;">​</a></h3><p>다수 mightyZAP의 동일한 Address 에 Data 저장</p><h4 id="_2-8-1-goal-position" tabindex="-1">2.8.1 Goal Position <a class="header-anchor" href="#_2-8-1-goal-position" aria-label="Permalink to &quot;2.8.1 Goal Position&quot;">​</a></h4><h5 id="_2-8-1-1-description" tabindex="-1">2.8.1.1 Description <a class="header-anchor" href="#_2-8-1-1-description" aria-label="Permalink to &quot;2.8.1.1 Description&quot;">​</a></h5><p>mightyZAP의 목표 위치 값을 지정하는 명령 패킷</p><h5 id="_2-8-1-2-command-packet" tabindex="-1">2.8.1.2 Command Packet <a class="header-anchor" href="#_2-8-1-2-command-packet" aria-label="Permalink to &quot;2.8.1.2 Command Packet&quot;">​</a></h5><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor 1<br>(Address)</th><th>Factor 2<br>(Length)</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x0A</td><td>0x73</td><td>0x86</td><td>0x02</td></tr></tbody></table><table><thead><tr><th>Factor 3<br>(1&gt; ID)</th><th>Factor 4<br>(1&gt; Data 1)</th><th>Factor 4<br>(1&gt; Data 2)</th><th>Factor 4<br>(2&gt; ID)</th><th>Factor 7<br>(2&gt; Data 1)</th><th>Factor 8<br>(2&gt; Data 2)</th><th>Checksum</th></tr></thead><tbody><tr><td>0x01</td><td>0xFF</td><td>0x03</td><td>0x02</td><td>0xFF</td><td>0x07</td><td>0xF1</td></tr></tbody></table><ul><li>다수의 mightyZAP에 각각의 목표 위치 값을 동시에 지정하는 명령 패킷</li><li>개별적으로 mightyZAP 마다 목표 위치 명령을 주었을 때 보다 지연 없이 동시에 동기화 되어 움직임</li><li>ID : Broadcast ID(모든 ID 의 mightyZAP에 명령을 전달)</li><li>Command : Factor 에 명시된 ID 를(1&gt;ID, 2&gt;ID ⋯) 가진 mightyZAP에 동시에 데이터 전송</li><li>Address : 12Lf Data Map에 명시된 mightyZAP의 현재 위치 값이 저장된 Address</li><li>Length: Address 로 부터 읽어올 Byte 의 수 (mightyZAP의 위치 값은 2byte 로 이루어져있습니다.)</li><li>Feedback Packet 은 회신되지 않습니다.</li></ul><h2 id="packet-test" tabindex="-1">Packet Test <a class="header-anchor" href="#packet-test" aria-label="Permalink to &quot;Packet Test&quot;">​</a></h2>',14))])}const _=o(m,[["render",b]]);export{P as __pageData,_ as default};
