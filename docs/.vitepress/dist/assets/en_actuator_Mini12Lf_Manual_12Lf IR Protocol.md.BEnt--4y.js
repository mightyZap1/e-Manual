import{_ as i,C as h,c as l,o as n,ag as a,G as d,w as r,a as o}from"./chunks/framework.Bw-5EFTY.js";const s="/assets/CommandPacket.46Ivz4K0.png",c="/assets/feedbackPacket.Dk0VS6dI.png",f=JSON.parse('{"title":"1. 개요","description":"","frontmatter":{},"headers":[],"relativePath":"en/actuator/Mini12Lf/Manual/12Lf IR Protocol.md","filePath":"en/actuator/Mini12Lf/Manual/12Lf IR Protocol.md"}'),m={name:"en/actuator/Mini12Lf/Manual/12Lf IR Protocol.md"};function u(b,t,F,p,k,x){const e=h("font");return n(),l("div",null,[t[2]||(t[2]=a('<h1 id="_1-개요" tabindex="-1">1. 개요 <a class="header-anchor" href="#_1-개요" aria-label="Permalink to &quot;1. 개요&quot;">​</a></h1><p>mightyZAP을 제어하기 위해서는 Protocol에 맞추어 통신을 해야하며, mightyZAP에서는 제어를 위한 전용 IR Protocol을 제공하고 있습니다.<br> IR Protocol 을 지원하는 모델은 아래와 같습니다.</p><ul><li>D7/D12 Series</li><li>L12 Series</li><li>12Lf Series</li></ul><h2 id="_1-2-packet-description" tabindex="-1">1.2 Packet Description <a class="header-anchor" href="#_1-2-packet-description" aria-label="Permalink to &quot;1.2 Packet Description&quot;">​</a></h2><h3 id="_1-2-1-command-packet" tabindex="-1">1.2.1 Command Packet <a class="header-anchor" href="#_1-2-1-command-packet" aria-label="Permalink to &quot;1.2.1 Command Packet&quot;">​</a></h3><p>It is command packets for mightyZAP operation. Its structure and elements are as below. <strong>Structure</strong><img src="'+s+'" alt="commandPacket"><strong>Element</strong></p><table><thead><tr><th>Index</th><th>Data</th><th>설명</th></tr></thead><tbody><tr><td>0</td><td>Start Bytes 1</td><td>Start Byte 1 (0xFF)</td></tr><tr><td>1</td><td>Start Bytes 2</td><td>Start Byte 2 (0xFF)</td></tr><tr><td>2</td><td>Start Bytes 3</td><td>Start Byte 3 (0xFF)</td></tr><tr><td>3</td><td>ID</td><td>mightyZAP ID (Range: 0 ~ 253, Broadcast ID: 254)</td></tr><tr><td>4</td><td>SIZE</td><td>Packet Size (COMMAND+FACTOR+CHECKSUM)</td></tr><tr><td>5</td><td>COMMAND</td><td>Instruction</td></tr><tr><td>5+1</td><td>FACTOR # 1</td><td>First Parameter</td></tr><tr><td>5+m</td><td>FACTOR # M</td><td>&#39;m&#39;th Parameter</td></tr><tr><td>5+N</td><td>FACTOR # N</td><td>Last Parameter</td></tr><tr><td>5+N+1</td><td>Check Sum</td><td>Check Sum = 0xff – ( LOWER_BYTE( ID + SIZE + COMMAND + FACTOR#1 + … + FACTOR#N ) )</td></tr></tbody></table><p><strong>Element Descroption</strong></p><ol><li>Header (3 Bytes) <ul><li>Code to recognize Packet start : 0xFFFFFF</li></ul></li><li>ID (1 Byte) <ul><li>The ID is an unique number of each mightyZAP to support Daisy Chain connection.</li><li>Factory default value(ID) is 0.</li><li>In case of ID = 0 ~253, ID &quot;N&quot; which is stored in the mightyZAP will be operated.</li><li>n case of ID = 254 (0xFE), it is operated under &quot;Broadcasting Mode (move all mightyZAP)&quot; and Feedback Packet does not work.</li></ul></li><li>SIZE (1 Byte) <ul><li>Packet length in Byte unit</li><li>Data counting value after &quot;Size&quot; data (COMMAND+FACTOR+CHECKSUM)</li><li>That is, Size value = Number of byte of &quot;Factor&quot; + 2</li></ul></li><li>COMMAND (1 Byte) <ul><li>Command codes defining the purpose of Packet</li></ul></li></ol><table><thead><tr><th>Function</th><th>CODE</th><th>Description</th></tr></thead><tbody><tr><td>Echo</td><td>0xF1</td><td>Feedback Packet Reception</td></tr><tr><td>Load Data</td><td>0xF2</td><td>Send &quot;Address&quot; and get feedback of Data</td></tr><tr><td>Store Data</td><td>0xF3</td><td>Send &quot;Address&quot; and &quot;Data&quot;. Then Save.</td></tr><tr><td>Send Data</td><td>0xF4</td><td>Send &quot;Address&quot; and &quot;Data&quot; for temporary storage</td></tr><tr><td>Excution</td><td>0xF5</td><td>Execute temporarily stored data that is made by<br>SendData.</td></tr><tr><td>Factory Reset</td><td>0xF6</td><td>Reset to Factory default parameter value</td></tr><tr><td>Restart</td><td>0xF8</td><td>Restart system</td></tr><tr><td>Symmetric Store</td><td>0x73</td><td>Store data in the same address of multiple qty mightyZAP</td></tr></tbody></table><ol start="5"><li>FACTOR <ul><li>Additional Packet factor according to Command</li></ul></li><li>CHECKSUM Verification data to check omission and any changes of Packet data. The interaction formula will be as below. <ul><li>Checksum = 0xff – ( LOWER_BYTE( ID + SIZE + COMMAND + FACTOR#1 + … + FACTOR#N ) )</li><li>LOWER_BYTE = Only the lower 1 byte is taken among the summed data values. = Divide the summed data value by 0x100 and take only the remainder.</li><li>Here is the formula for above. LOWER_BYTE( ID + SIZE + COMMAND + FACTOR#1 + ... + FACTOR#N ) == ( ID + SIZE + COMMAND + FACTOR#1 + ... + FACTOR#N ) % 0x100</li></ul></li></ol><h3 id="_1-2-2-feedback-packet" tabindex="-1">1.2.2 Feedback Packet <a class="header-anchor" href="#_1-2-2-feedback-packet" aria-label="Permalink to &quot;1.2.2 Feedback Packet&quot;">​</a></h3><p>After reception of command packet, mightyZAP sends Feedback packet including requested information. Its structure and factors are as below. <strong>Structure</strong><br><img src="'+c+'" alt="feedbackPacket">]]<br><strong>Element</strong></p><table><thead><tr><th>Index</th><th>Data</th><th>설명</th></tr></thead><tbody><tr><td>0</td><td>Start Bytes 1</td><td>Start Byte 1 (0xFF)</td></tr><tr><td>1</td><td>Start Bytes 2</td><td>Start Byte 2 (0xFF)</td></tr><tr><td>2</td><td>Start Bytes 3</td><td>Start Byte 3 (0xFF)</td></tr><tr><td>3</td><td>ID</td><td>mightyZAP ID ((Range: 0 ~253, Broadcast ID:254)</td></tr><tr><td>4</td><td>SIZE</td><td>Packet Size (COMMAND+FACTOR+CHECKSUM)</td></tr><tr><td>5</td><td>ERROR</td><td>Error Code</td></tr><tr><td>5+1</td><td>FACTOR # 1</td><td>First Parameter</td></tr><tr><td>5+m</td><td>FACTOR # M</td><td>&#39;m&#39; th Parameter</td></tr><tr><td>5+N</td><td>FACTOR # N</td><td>Last Parameter</td></tr><tr><td>5+N+1</td><td>Check Sum</td><td>Check Sum = 0xff – ( LOWER_BYTE( ID + SIZE + COMMAND + FACTOR#1 + … + FACTOR#N ) )</td></tr><tr><td><strong>Element Descroption</strong></td><td></td><td></td></tr></tbody></table><ol><li>Header (3 Bytes) <ul><li>Recognizing &quot;Packet start&quot; code. 0xFFFFFF</li></ul></li><li>ID (1 Byte) <ul><li>Individual ID number for each mightyZAP (0 ~253)</li></ul></li><li>SIZE (1 Byte) <ul><li>Packet length in Byte unit</li><li>Data counting value after &quot;Size&quot; data (ERROR+FACTOR+CHECKSUM)</li><li>That is, Size value = Number of byte of &quot;Factor&quot; + 2</li></ul></li><li>COMMAND (1 Byte) <ul><li>Error status during operation for each bit</li></ul></li></ol><table><thead><tr><th>Error</th><th>bit</th><th>Description</th><th>LED 표시</th></tr></thead><tbody><tr><td>Overload Error</td><td>5</td><td>In case that current load cannot be controlled with the<br>designated maximum force, it will be set as &quot;1&quot;</td><td>Red<br>Blink</td></tr><tr><td>Input voltage Error</td><td>0</td><td>In case that the input voltage is out of operating voltage<br>range designated in the Control table, it will be set as &quot;1&quot;</td><td>Red On</td></tr></tbody></table><ol start="5"><li>FACTOR <ul><li>Additional Packet factor according to Feedback data.</li></ul></li><li>CHECKSUM Verification data to check omission and any changes of Packet data. The interaction formula will be as below. <ul><li>Checksum = 0xff – ( LOWER_BYTE( ID + SIZE + COMMAND + FACTOR#1 + … + FACTOR#N ) )</li><li>LOWER_BYTE = Only the lower 1 byte is taken among the summed data values. = Divide the summed data value by 0x100 and take only the remainder -Here is the formula for above. LOWER_BYTE( ID + SIZE + COMMAND + FACTOR#1 + ... + FACTOR#N ) == ( ID + SIZE + ERROR + FACTOR#1 + ... + FACTOR#N ) % 0x100</li></ul></li></ol><h1 id="_2-instruction" tabindex="-1">2. Instruction <a class="header-anchor" href="#_2-instruction" aria-label="Permalink to &quot;2. Instruction&quot;">​</a></h1><h1 id="_2-1-echo" tabindex="-1">2.1 Echo <a class="header-anchor" href="#_2-1-echo" aria-label="Permalink to &quot;2.1 Echo&quot;">​</a></h1><p>Receiving Feedback Packet (Refer to the” Load Data” parameter for feedback on position v</p><h3 id="_2-1-1-예제" tabindex="-1">2.1.1 예제 <a class="header-anchor" href="#_2-1-1-예제" aria-label="Permalink to &quot;2.1.1 예제&quot;">​</a></h3><p>Command packet to recognize status of mightyZAP connection.</p><h4 id="_2-1-2-1-command-packet" tabindex="-1">2.1.2.1 Command Packet <a class="header-anchor" href="#_2-1-2-1-command-packet" aria-label="Permalink to &quot;2.1.2.1 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x02</td><td>0xF1</td><td>0x0c</td></tr></tbody></table><h4 id="_2-1-2-1-feedback-packet" tabindex="-1">2.1.2.1 Feedback Packet <a class="header-anchor" href="#_2-1-2-1-feedback-packet" aria-label="Permalink to &quot;2.1.2.1 Feedback Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x02</td><td>0x00</td><td>0xFD</td></tr></tbody></table><h1 id="_2-2-factory-reset" tabindex="-1">2.2 Factory Reset <a class="header-anchor" href="#_2-2-factory-reset" aria-label="Permalink to &quot;2.2 Factory Reset&quot;">​</a></h1><p>Basic parameter (Memory &amp; Parameter) to be reset to Default value. Additional Reset to be determined according to options.</p><ul><li>mightyZAP을 리셋하기 위해서는 아래의 Option Data를 설정해야 합니다.</li><li>If concerned bit is &quot;1&quot;, it means Reset. If it is &quot;0&quot;, it means Hold.</li></ul><table><thead><tr><th>Option</th><th>Bit</th><th>리셋 동작</th></tr></thead><tbody><tr><td>ID</td><td>0</td><td>Reset mightyZAP ID to 0</td></tr><tr><td>Baudrate</td><td>1</td><td>Reset to 32 (57600 bps)</td></tr></tbody></table><h3 id="_2-2-1-예제" tabindex="-1">2.2.1 예제 <a class="header-anchor" href="#_2-2-1-예제" aria-label="Permalink to &quot;2.2.1 예제&quot;">​</a></h3><p>mightyZAP ID to be reset to 0(ID Default) and Baud Rate to be maintained current status.</p><h4 id="_2-2-2-1-command-packet" tabindex="-1">2.2.2.1 Command Packet <a class="header-anchor" href="#_2-2-2-1-command-packet" aria-label="Permalink to &quot;2.2.2.1 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor<br>(option)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x03</td><td>0xF6</td><td>0x01</td><td>0x04</td></tr></tbody></table><h4 id="_2-2-2-1-feedback-packet" tabindex="-1">2.2.2.1 Feedback Packet <a class="header-anchor" href="#_2-2-2-1-feedback-packet" aria-label="Permalink to &quot;2.2.2.1 Feedback Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x02</td><td>0x00</td><td>0xFD</td></tr></tbody></table><h1 id="_2-3-restart" tabindex="-1">2.3 Restart <a class="header-anchor" href="#_2-3-restart" aria-label="Permalink to &quot;2.3 Restart&quot;">​</a></h1><p>mightyZAP system Restart</p>',38)),d(e,{color:"#ff0000"},{default:r(()=>t[0]||(t[0]=[o("Feedback packet informing receipt of Restart command of mightyZAP system (Only feedback in the Feedback Return Mode 2)")])),_:1,__:[0]}),t[3]||(t[3]=a('<h3 id="_2-3-1-예제" tabindex="-1">2.3.1 예제 <a class="header-anchor" href="#_2-3-1-예제" aria-label="Permalink to &quot;2.3.1 예제&quot;">​</a></h3><p>Command packet to reboot mightyZAP system.</p><h4 id="_2-3-2-1-command-packet" tabindex="-1">2.3.2.1 Command Packet <a class="header-anchor" href="#_2-3-2-1-command-packet" aria-label="Permalink to &quot;2.3.2.1 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x02</td><td>0xF8</td><td>0x05</td></tr></tbody></table><h4 id="_2-3-2-1-feedback-packet" tabindex="-1">2.3.2.1 Feedback Packet <a class="header-anchor" href="#_2-3-2-1-feedback-packet" aria-label="Permalink to &quot;2.3.2.1 Feedback Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x02</td><td>0xF8</td><td>0x05</td></tr></tbody></table><h1 id="_2-4-store-data" tabindex="-1">2.4 Store Data <a class="header-anchor" href="#_2-4-store-data" aria-label="Permalink to &quot;2.4 Store Data&quot;">​</a></h1><p>Store data after sending Address and Data to set ID, goal position, Force limit, Stroke limit, Speed, Force On/Off and etc.</p>',8)),d(e,{color:"#ff0000"},{default:r(()=>t[1]||(t[1]=[o("Feedback packet informing receipt of Restart command of mightyZAP system (Only feedback in the Feedback Return Mode 2)")])),_:1,__:[1]}),t[4]||(t[4]=a('<h3 id="_2-4-1-id-change" tabindex="-1">2.4.1 ID change <a class="header-anchor" href="#_2-4-1-id-change" aria-label="Permalink to &quot;2.4.1 ID change&quot;">​</a></h3><h4 id="_2-4-1-1-description" tabindex="-1">2.4.1.1 Description <a class="header-anchor" href="#_2-4-1-1-description" aria-label="Permalink to &quot;2.4.1.1 Description&quot;">​</a></h4><p>Change ID‘0’ into ID ‘1’(0x01)</p><ul><li>ID : mightyZAP ID</li><li>Command : Save data at respective address in order</li><li>Address : the address which mightyZAP ID is saved. (see User Manual Data Map)</li><li>Data : Desired mightyZAP ID (put 0x01 at address 0x03)</li></ul><h4 id="_2-4-1-2-command-packet" tabindex="-1">2.4.1.2 Command Packet <a class="header-anchor" href="#_2-4-1-2-command-packet" aria-label="Permalink to &quot;2.4.1.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0xF3</td><td>0x03</td><td>0x01</td><td>0x04</td></tr></tbody></table><h3 id="_2-4-2-goal-position-command" tabindex="-1">2.4.2 Goal Position command <a class="header-anchor" href="#_2-4-2-goal-position-command" aria-label="Permalink to &quot;2.4.2 Goal Position command&quot;">​</a></h3><h4 id="_2-4-2-1-description" tabindex="-1">2.4.2.1 Description <a class="header-anchor" href="#_2-4-2-1-description" aria-label="Permalink to &quot;2.4.2.1 Description&quot;">​</a></h4><p>Command packet to assign goal position to 2047(0x07FF)</p><ul><li>ID : mightyZAP ID</li><li>Command : : Save data at respective address in order.</li><li>Address : the address which goal position value is saved. (see User Manual Data Map)</li><li>Data #1 : Desired goal position’s lower byte (address 0x86 : 0xFF)</li><li>Data #2 : Desired goal position’s lower byte (address 0x86 : 0xFF) ※Goal position value Hex change (decimal number -&gt; hexadecimal number) : 2047 -&gt; 0x07FF</li></ul><h4 id="_2-4-2-2-command-packet" tabindex="-1">2.4.2.2 Command Packet <a class="header-anchor" href="#_2-4-2-2-command-packet" aria-label="Permalink to &quot;2.4.2.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Factor #3<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x05</td><td>0xF3</td><td>0x86</td><td>0xFF</td><td>0x07</td><td>0x7A</td></tr></tbody></table><h3 id="_2-4-3-goal-speed" tabindex="-1">2.4.3 Goal Speed <a class="header-anchor" href="#_2-4-3-goal-speed" aria-label="Permalink to &quot;2.4.3 Goal Speed&quot;">​</a></h3><h4 id="_2-4-3-1-description" tabindex="-1">2.4.3.1 Description <a class="header-anchor" href="#_2-4-3-1-description" aria-label="Permalink to &quot;2.4.3.1 Description&quot;">​</a></h4><p>Command packet to assign Goal Speed to 512(0x0200)</p><ul><li>ID : mightyZAP ID</li><li>Command : Save data at respective address in order</li><li>Address : the address which Goal Speed value is saved. (see User Manual Data Map)</li><li>Data #1 : Desired Goal Speed value’s lower byte (address 0x15 : 0x00)</li><li>Data #2 : Desired Goal Speed value’s upper byte (address 0x16 : 0x02) ※Goal Speedvalue Hex change (decimal number -&gt; hexadecimal number) : 512 -&gt; 0x0200</li></ul><h4 id="_2-4-3-2-command-packet" tabindex="-1">2.4.3.2 Command Packet <a class="header-anchor" href="#_2-4-3-2-command-packet" aria-label="Permalink to &quot;2.4.3.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Factor #3<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x05</td><td>0xF3</td><td>0x88</td><td>0x00</td><td>0x02</td><td></td></tr></tbody></table><h3 id="_2-4-4-goal-current" tabindex="-1">2.4.4 Goal Current <a class="header-anchor" href="#_2-4-4-goal-current" aria-label="Permalink to &quot;2.4.4 Goal Current&quot;">​</a></h3><h4 id="_2-4-4-1-description" tabindex="-1">2.4.4.1 Description <a class="header-anchor" href="#_2-4-4-1-description" aria-label="Permalink to &quot;2.4.4.1 Description&quot;">​</a></h4><p>Command packet to assign Goal Current to 800(0x0320)</p><ul><li>ID : mightyZAP ID</li><li>Command : Save data at respective address in order</li><li>Address : the address which Goal Current value is saved. (see User Manual Data Map)</li><li>Data #1 : Desired Goal Current value’s lower byte (address 0x34: 0x20)</li><li>Data #2 : Desired Goal Current value’s upper byte (address 0x35: 0x03) ※※Goal Current value Hex change (decimal number -&gt; hexadecimal number) : 800 -&gt; 0x0320</li></ul><h4 id="_2-4-4-2-command-packet" tabindex="-1">2.4.4.2 Command Packet <a class="header-anchor" href="#_2-4-4-2-command-packet" aria-label="Permalink to &quot;2.4.4.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Factor #3<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x05</td><td>0xF3</td><td>0x88</td><td>0x00</td><td>0x02</td><td></td></tr></tbody></table><h3 id="_2-4-5-stroke-limit" tabindex="-1">2.4.5 Stroke Limit <a class="header-anchor" href="#_2-4-5-stroke-limit" aria-label="Permalink to &quot;2.4.5 Stroke Limit&quot;">​</a></h3><h4 id="_2-4-5-1-description" tabindex="-1">2.4.5.1 Description <a class="header-anchor" href="#_2-4-5-1-description" aria-label="Permalink to &quot;2.4.5.1 Description&quot;">​</a></h4><p>Command packet to assign Short Stroke limit to 100(0x0064)</p><ul><li>ID : mightyZAP ID</li><li>Command : Save data at respective address in order</li><li>Address : the address which short stroke limit value is saved. (see User Manual Data Map)</li><li>Data #1 : Desired Short stroke limit value’s lower byte (address 0x06 : 0x64)</li><li>Data #2 : Desired Short stroke limit value’s upper byte (address 0x07 : 0x00) ※Stroke limit value Hex change(decimal number -&gt; hexadecimal number) : 100 -&gt; 0x0064</li></ul><h4 id="_2-4-5-2-command-packet" tabindex="-1">2.4.5.2 Command Packet <a class="header-anchor" href="#_2-4-5-2-command-packet" aria-label="Permalink to &quot;2.4.5.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Factor #3<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x05</td><td>0xF3</td><td>0x06</td><td>0x64</td><td>0x00</td><td>0x9C</td></tr></tbody></table><h3 id="_2-4-6-force-on-off" tabindex="-1">2.4.6 Force On/Off <a class="header-anchor" href="#_2-4-6-force-on-off" aria-label="Permalink to &quot;2.4.6 Force On/Off&quot;">​</a></h3><h4 id="_2-4-6-1-description" tabindex="-1">2.4.6.1 Description <a class="header-anchor" href="#_2-4-6-1-description" aria-label="Permalink to &quot;2.4.6.1 Description&quot;">​</a></h4><p>Command packet to cut off Motor power while communication is alive.</p><ul><li>ID : mightyZAP ID</li><li>Command : Save data at respective address in order.</li><li>Address : the address which Force On/Off value is saved. (see User Manual Data Map)</li><li>Data : Desired Force On/Off Data byte (address0x80 : 0x00(Off) / 0x01(On))</li><li>After force-off, automatically Force On when next goal position command is made.</li></ul><h4 id="_2-4-6-2-command-packet" tabindex="-1">2.4.6.2 Command Packet <a class="header-anchor" href="#_2-4-6-2-command-packet" aria-label="Permalink to &quot;2.4.6.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x04</td><td>0xF3</td><td>0x80</td><td>0x00</td><td>0x87</td></tr></tbody></table><h3 id="_2-4-7-feedback-return-mode" tabindex="-1">2.4.7 Feedback Return Mode <a class="header-anchor" href="#_2-4-7-feedback-return-mode" aria-label="Permalink to &quot;2.4.7 Feedback Return Mode&quot;">​</a></h3><h4 id="_2-4-7-1-description" tabindex="-1">2.4.7.1 Description <a class="header-anchor" href="#_2-4-7-1-description" aria-label="Permalink to &quot;2.4.7.1 Description&quot;">​</a></h4><p>Command packet to send Feedback packet for All commands.</p><ul><li>ID : mightyZAP ID</li><li>Command : Save data at respective address in order.</li><li>Address : the address which Feedback Return Mode value is saved. (see User Manual Data Map)</li><li>Data : Feedback Return Mode Data (address 0x10 : 0x02) 1 :: Send Feedback packet only to Load Data(0xF3) Command 2 : Send Feedback packet to All</li></ul><h4 id="_2-4-7-2-command-packet" tabindex="-1">2.4.7.2 Command Packet <a class="header-anchor" href="#_2-4-7-2-command-packet" aria-label="Permalink to &quot;2.4.7.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x04</td><td>0xF3</td><td>0x10</td><td>0x02</td><td>0xF5</td></tr></tbody></table><h1 id="_2-5-load-data" tabindex="-1">2.5 Load Data <a class="header-anchor" href="#_2-5-load-data" aria-label="Permalink to &quot;2.5 Load Data&quot;">​</a></h1><p>Send address and Get data feedback</p><h3 id="_2-5-1-present-position" tabindex="-1">2.5.1 Present Position <a class="header-anchor" href="#_2-5-1-present-position" aria-label="Permalink to &quot;2.5.1 Present Position&quot;">​</a></h3><h4 id="_2-5-1-1-description" tabindex="-1">2.5.1.1 Description <a class="header-anchor" href="#_2-5-1-1-description" aria-label="Permalink to &quot;2.5.1.1 Description&quot;">​</a></h4><p>Command packet to read present Position</p><h4 id="_2-5-1-2-command-packet" tabindex="-1">2.5.1.2 Command Packet <a class="header-anchor" href="#_2-5-1-2-command-packet" aria-label="Permalink to &quot;2.5.1.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Length)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0xf2</td><td>0x8C</td><td>0x02</td><td>0x7B</td></tr></tbody></table><ul><li>ID : mightyZAP ID</li><li>Command : Read byte (equivalent to the Length number) from Address</li><li>Address : : Address where present position value is saved. (see User Manual Data Map)</li><li>Length : The number of byte to read from Address (present position value consists of 2byte.)</li></ul><h4 id="_2-5-1-3-feeback-packet" tabindex="-1">2.5.1.3 Feeback Packet <a class="header-anchor" href="#_2-5-1-3-feeback-packet" aria-label="Permalink to &quot;2.5.1.3 Feeback Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Factor #1</th><th>Factor #2</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0x00</td><td>0xFF</td><td>0x07</td><td>0xF5</td></tr></tbody></table><ul><li>ID : mightyZAP ID</li><li>Error : Error indication during operation</li><li>Factor 1 : Present position value’s lower byte (ex&gt; 0xff)</li><li>Factor 2 : Present position value’s upper byte (ex&gt; 0x07) ※ Present position value Hex change(hexadecimal number -&gt; decimal number) : 0x07ff -&gt; 2047</li></ul><h3 id="_2-5-2-present-motor-operating-rate" tabindex="-1">2.5.2 Present Motor Operating Rate <a class="header-anchor" href="#_2-5-2-present-motor-operating-rate" aria-label="Permalink to &quot;2.5.2 Present Motor Operating Rate&quot;">​</a></h3><h4 id="_2-5-1-1-description-1" tabindex="-1">2.5.1.1 Description <a class="header-anchor" href="#_2-5-1-1-description-1" aria-label="Permalink to &quot;2.5.1.1 Description&quot;">​</a></h4><p>Command packet to read present Motor Operating Rate</p><h4 id="_2-5-1-2-command-packet-1" tabindex="-1">2.5.1.2 Command Packet <a class="header-anchor" href="#_2-5-1-2-command-packet-1" aria-label="Permalink to &quot;2.5.1.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Length)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0xF2</td><td>0x90</td><td>0x02</td><td>0x77</td></tr></tbody></table><ul><li>ID : mightyZAP의 ID</li><li>Command : Read byte (equivalent to the Length number) from Address</li><li>Address : Address where present motor operating rate value is saved. (see User Manual Data Map)</li><li>Length : The number of byte to read from Address (present load value consists of 2byte.)</li></ul><h4 id="_2-5-1-3-feeback-packet-1" tabindex="-1">2.5.1.3 Feeback Packet <a class="header-anchor" href="#_2-5-1-3-feeback-packet-1" aria-label="Permalink to &quot;2.5.1.3 Feeback Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Factor #1</th><th>Factor #2</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0x00</td><td>0xFF</td><td>0x03</td><td>0xF9</td></tr></tbody></table><ul><li>ID : mightyZAP ID</li><li>Error : Error indication during operation</li><li>Factor 1 : Present motor operating rate value lower byte (ex&gt; 0xff)</li><li>Factor 2 : Present motor operating rate value upper byte (ex&gt; 0x03) ※ Present motor operating rate value Hex change(hexadecimal number -&gt; decimal number) : 0x03ff -&gt; 1023</li></ul><h3 id="_2-5-3-present-voltage" tabindex="-1">2.5.3 Present Voltage <a class="header-anchor" href="#_2-5-3-present-voltage" aria-label="Permalink to &quot;2.5.3 Present Voltage&quot;">​</a></h3><h4 id="_2-5-1-1-description-2" tabindex="-1">2.5.1.1 Description <a class="header-anchor" href="#_2-5-1-1-description-2" aria-label="Permalink to &quot;2.5.1.1 Description&quot;">​</a></h4><p>Command packet to read present input Voltage</p><h4 id="_2-5-1-2-command-packet-2" tabindex="-1">2.5.1.2 Command Packet <a class="header-anchor" href="#_2-5-1-2-command-packet-2" aria-label="Permalink to &quot;2.5.1.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Length)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x04</td><td>0xF2</td><td>0x92</td><td>0x01</td><td>0x76</td></tr></tbody></table><ul><li>ID : 대상 mightyZAP의 ID</li><li>Command : Read byte (equivalent to the Length number) from Address</li><li>Address : Address where present voltage value is saved. (see User Manual Data Map)</li><li>Length : The number of byte to read from Address (present voltage value consists of 2byte.)</li></ul><h4 id="_2-5-1-3-feeback-packet-2" tabindex="-1">2.5.1.3 Feeback Packet <a class="header-anchor" href="#_2-5-1-3-feeback-packet-2" aria-label="Permalink to &quot;2.5.1.3 Feeback Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Factor #1</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x00</td><td>0x03</td><td>0x00</td><td>0x7B</td><td>0x81</td></tr></tbody></table><ul><li>ID : mightyZAP ID</li><li>Error : : Error indication during operation</li><li>Factor 1 :: Present Voltage value byte (ex&gt; 0x7B) ※ Present voltage value Hex change(hexadecimal number -&gt; decimal number): 0x7B -&gt; 123(12.3V)</li></ul><h1 id="_2-6-send-data" tabindex="-1">2.6 Send Data <a class="header-anchor" href="#_2-6-send-data" aria-label="Permalink to &quot;2.6 Send Data&quot;">​</a></h1><p>Send &quot;Address&quot; and &quot;Data&quot;, Then temporarily store it.</p><h3 id="_2-6-1-gaol-position" tabindex="-1">2.6.1 Gaol Position <a class="header-anchor" href="#_2-6-1-gaol-position" aria-label="Permalink to &quot;2.6.1 Gaol Position&quot;">​</a></h3><h4 id="_2-6-1-1-description" tabindex="-1">2.6.1.1 Description <a class="header-anchor" href="#_2-6-1-1-description" aria-label="Permalink to &quot;2.6.1.1 Description&quot;">​</a></h4><p>Command packet for temporary store of goal position as 2047(0x07FF).</p><h4 id="_2-6-1-2-command-packet" tabindex="-1">2.6.1.2 Command Packet <a class="header-anchor" href="#_2-6-1-2-command-packet" aria-label="Permalink to &quot;2.6.1.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor #1<br>(Address)</th><th>Factor #2<br>(Data 1)</th><th>Factor #2<br>(Data 2)</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x05</td><td>0xF4</td><td>0x86</td><td>0xff</td><td>0x07</td><td>0x79</td></tr></tbody></table><h4 id="_2-6-1-3-feedback-packet" tabindex="-1">2.6.1.3 Feedback Packet <a class="header-anchor" href="#_2-6-1-3-feedback-packet" aria-label="Permalink to &quot;2.6.1.3 Feedback Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x02</td><td>0x00</td><td>0xFC</td></tr></tbody></table><h1 id="_2-7-excution" tabindex="-1">2.7 Excution <a class="header-anchor" href="#_2-7-excution" aria-label="Permalink to &quot;2.7 Excution&quot;">​</a></h1><p>Execute temporarily stored data that is made by Send Data.</p><h3 id="_2-6-1-example" tabindex="-1">2.6.1 Example <a class="header-anchor" href="#_2-6-1-example" aria-label="Permalink to &quot;2.6.1 Example&quot;">​</a></h3><h4 id="_2-6-1-1-description-1" tabindex="-1">2.6.1.1 Description <a class="header-anchor" href="#_2-6-1-1-description-1" aria-label="Permalink to &quot;2.6.1.1 Description&quot;">​</a></h4><p>Command packet to execute all temporarily stored data at the same time. Feedback packet informing receipt of execution command for temporarily stored data. (Only feedback in the Feedback Return Mode2)</p><h4 id="_2-6-1-2-command-packet-1" tabindex="-1">2.6.1.2 Command Packet <a class="header-anchor" href="#_2-6-1-2-command-packet-1" aria-label="Permalink to &quot;2.6.1.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x02</td><td>0xF5</td><td>0x07</td></tr></tbody></table><h4 id="_2-6-1-3-feedback-packet-1" tabindex="-1">2.6.1.3 Feedback Packet <a class="header-anchor" href="#_2-6-1-3-feedback-packet-1" aria-label="Permalink to &quot;2.6.1.3 Feedback Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Error</th><th>Checksum</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x02</td><td>0x00</td><td>0xFC</td></tr></tbody></table><h1 id="_2-7-symmetric-store" tabindex="-1">2.7 Symmetric Store <a class="header-anchor" href="#_2-7-symmetric-store" aria-label="Permalink to &quot;2.7 Symmetric Store&quot;">​</a></h1><p>Save data in the same address of multiple mightyZAP</p><h3 id="_2-7-1-goal-position" tabindex="-1">2.7.1 Goal Position <a class="header-anchor" href="#_2-7-1-goal-position" aria-label="Permalink to &quot;2.7.1 Goal Position&quot;">​</a></h3><h4 id="_2-7-1-1-description" tabindex="-1">2.7.1.1 Description <a class="header-anchor" href="#_2-7-1-1-description" aria-label="Permalink to &quot;2.7.1.1 Description&quot;">​</a></h4><p>Command packet to assign multiple mightyZAP’s goal positions.</p><ul><li>ID 1 : 1023(0x03FF)</li><li>ID 2 : 2047(0x07FF)</li></ul><h4 id="_2-7-1-2-command-packet" tabindex="-1">2.7.1.2 Command Packet <a class="header-anchor" href="#_2-7-1-2-command-packet" aria-label="Permalink to &quot;2.7.1.2 Command Packet&quot;">​</a></h4><table><thead><tr><th>HEADER</th><th>ID</th><th>Size</th><th>Command</th><th>Factor 1<br>(Address)</th><th>Factor 2<br>(Length)</th></tr></thead><tbody><tr><td>0xFFFFFF</td><td>0x01</td><td>0x0A</td><td>0x73</td><td>0x86</td><td>0x02</td></tr></tbody></table><table><thead><tr><th>Factor 3<br>(1&gt; ID)</th><th>Factor 4<br>(1&gt; Data 1)</th><th>Factor 4<br>(1&gt; Data 2)</th><th>Factor 4<br>(2&gt; ID)</th><th>Factor 7<br>(2&gt; Data 1)</th><th>Factor 8<br>(2&gt; Data 2)</th><th>Checksum</th></tr></thead><tbody><tr><td>0x01</td><td>0xFF</td><td>0x03</td><td>0x02</td><td>0xFF</td><td>0x07</td><td>0xF1</td></tr></tbody></table><ul><li>Command packet to assign respective goal position to multiple qty mightyZAP motors at the same time.</li><li>Better synchronization without delay than respective command is made for each mightyZAP.</li><li>ID : Broadcast ID (Command to all connected IDs)</li><li>Command : Send data at the same time to the ID defined in Factor (1&gt;ID, 2&gt;ID …)</li><li>Address : Address present position value is saved. (See User Manual Data Map)</li><li>Length: The number of byte to read from Address (present position value consists of 2byte.)</li><li>feedback Packet : No Feedback.</li></ul><h1 id="packet-test" tabindex="-1">Packet Test <a class="header-anchor" href="#packet-test" aria-label="Permalink to &quot;Packet Test&quot;">​</a></h1>',100))])}const P=i(m,[["render",u]]);export{f as __pageData,P as default};
