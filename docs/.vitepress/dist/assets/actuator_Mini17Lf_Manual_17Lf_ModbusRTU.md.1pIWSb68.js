import{_ as n,C as h,c as s,o as u,a2 as l,j as d,G as e,w as r,a}from"./chunks/framework.DfL7K9Ap.js";const b="/assets/packetDescription.C0Eykc0N.png",p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"actuator/Mini17Lf/Manual/17Lf_ModbusRTU.md","filePath":"actuator/Mini17Lf/Manual/17Lf_ModbusRTU.md","lastUpdated":null}'),x={name:"actuator/Mini17Lf/Manual/17Lf_ModbusRTU.md"};function C(_,t,R,g,y,f){const o=h("center"),i=h("font");return u(),s("div",null,[t[48]||(t[48]=l('<h2 id="_1-개요" tabindex="-1">1 개요 <a class="header-anchor" href="#_1-개요" aria-label="Permalink to &quot;1 개요&quot;">​</a></h2><p>MODBUS 프로토콜은 산업용 프로토콜로 PLC통신 등에 주로 사용되는 표준이 되는 프로토콜입니다. 주로 사용하는 방식은 RTU방식과 ASCII방식이 주로 사용되고, 요즘에는 TCP방식도 나와있습니다.</p><p>1979년부터 업계의 사실상 직렬 표준인 MODBUS는 수 백만 개의 자동화 장치가 지속적으로 통신할 수 있도록 지원하고 있습니다. MODBUS는 요청/응답 프로토콜이며 기능 코드별로 지정된 서비스를 제공합니다. 프레임의 구성은 Application Data Unit인 ADU와 Protocol Data Unit인 PDU로 구성되어 있습니다.</p><h2 id="_2-프레임-구조" tabindex="-1">2 프레임 구조 <a class="header-anchor" href="#_2-프레임-구조" aria-label="Permalink to &quot;2 프레임 구조&quot;">​</a></h2><h3 id="_2-1-packet-discription" tabindex="-1">2.1 Packet Discription <a class="header-anchor" href="#_2-1-packet-discription" aria-label="Permalink to &quot;2.1 Packet Discription&quot;">​</a></h3><p>mightyZAP은 MODBUS-RTU 프로토콜 내용을 준수합니다.<br> 본 매뉴얼에 나오지 않은 사항들은 아래의 관련 표준 문서를 참조하여 주시기 바랍니다.</p><h4 id="_2-1-1-packet-structure" tabindex="-1">2.1.1 Packet Structure <a class="header-anchor" href="#_2-1-1-packet-structure" aria-label="Permalink to &quot;2.1.1 Packet Structure&quot;">​</a></h4><p>MODBUS-RTU 프로토콜의 최대 송수신 패킷 길이는 256 Byte 입니다. 따라서 송수신 패킷의 총 길이가 256Byte 를 넘기지 않도록 주의하여 주십시오.<br> MODBUS-RTU 통신 Mode 는 Packet 을 구분하기 위해서 아래 그림과 같이 시작과 끝 사이에 최소 3.5 Char 이상의 이 필요합니다.</p><p><img src="'+b+'" alt="packet Description"></p><ul><li>송신 패킷 구조</li></ul>',10)),d("table",null,[t[16]||(t[16]=d("thead",null,[d("tr",null,[d("th"),d("th",null,"Address"),d("th",null,"Fucntion code"),d("th",{colspan:"3"},"Data"),d("th",{colspan:"2"},"Error Check")])],-1)),d("tbody",null,[d("tr",null,[t[2]||(t[2]=d("td",null,"byte",-1)),t[3]||(t[3]=d("td",null,"0",-1)),t[4]||(t[4]=d("td",null,"1",-1)),t[5]||(t[5]=d("td",null,"2",-1)),d("td",null,[e(o,null,{default:r(()=>t[0]||(t[0]=[a("…")])),_:1,__:[0]})]),d("td",null,[e(o,null,{default:r(()=>t[1]||(t[1]=[a("…")])),_:1,__:[1]})]),t[6]||(t[6]=d("td",null,"n-1",-1)),t[7]||(t[7]=d("td",null,"n",-1))]),d("tr",null,[t[10]||(t[10]=d("td",null,"내용",-1)),t[11]||(t[11]=d("td",null,"mightyZAP ID",-1)),t[12]||(t[12]=d("td",null,"Function",-1)),t[13]||(t[13]=d("td",null,"Data",-1)),d("td",null,[e(o,null,{default:r(()=>t[8]||(t[8]=[a("…")])),_:1,__:[8]})]),d("td",null,[e(o,null,{default:r(()=>t[9]||(t[9]=[a("…")])),_:1,__:[9]})]),t[14]||(t[14]=d("td",null,"CRC(MSB)",-1)),t[15]||(t[15]=d("td",null,"CRC(LSB)",-1))])])]),t[49]||(t[49]=d("ul",null,[d("li",null,"수신 패킷 구조 - 정상 응답")],-1)),d("table",null,[t[33]||(t[33]=d("thead",null,[d("tr",null,[d("th"),d("th",null,"Address"),d("th",null,"Fucntion code"),d("th",{colspan:"3"},"Data"),d("th",{colspan:"2"},"Error Check")])],-1)),d("tbody",null,[d("tr",null,[t[19]||(t[19]=d("td",null,"byte",-1)),t[20]||(t[20]=d("td",null,"0",-1)),t[21]||(t[21]=d("td",null,"1",-1)),t[22]||(t[22]=d("td",null,"2",-1)),d("td",null,[e(o,null,{default:r(()=>t[17]||(t[17]=[a("…")])),_:1,__:[17]})]),d("td",null,[e(o,null,{default:r(()=>t[18]||(t[18]=[a("…")])),_:1,__:[18]})]),t[23]||(t[23]=d("td",null,"n-1",-1)),t[24]||(t[24]=d("td",null,"n",-1))]),d("tr",null,[t[27]||(t[27]=d("td",null,"내용",-1)),t[28]||(t[28]=d("td",null,"mightyZAP ID",-1)),t[29]||(t[29]=d("td",null,"Function",-1)),t[30]||(t[30]=d("td",null,"Data",-1)),d("td",null,[e(o,null,{default:r(()=>t[25]||(t[25]=[a("…")])),_:1,__:[25]})]),d("td",null,[e(o,null,{default:r(()=>t[26]||(t[26]=[a("…")])),_:1,__:[26]})]),t[31]||(t[31]=d("td",null,"CRC(MSB)",-1)),t[32]||(t[32]=d("td",null,"CRC(LSB)",-1))])])]),t[50]||(t[50]=l('<ul><li>수신 패킷 구조 - 비 정상 응답</li></ul><table><thead><tr><th></th><th>Address</th><th>Fucntion code</th><th>Data</th><th colspan="2">Error Check</th></tr></thead><tbody><tr><td>byte</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>내용</td><td>mightyZAP ID</td><td>Function <br>+ 0x80</td><td>Exception code</td><td>CRC(MSB)</td><td>CRC(LSB)</td></tr></tbody></table><h4 id="_2-1-2-packet-element-설명" tabindex="-1">2.1.2 Packet Element 설명 <a class="header-anchor" href="#_2-1-2-packet-element-설명" aria-label="Permalink to &quot;2.1.2 Packet Element 설명&quot;">​</a></h4><h5 id="_2-1-2-1-start" tabindex="-1">2.1.2.1 Start <a class="header-anchor" href="#_2-1-2-1-start" aria-label="Permalink to &quot;2.1.2.1 Start&quot;">​</a></h5><ul><li>서로 다른 Frame 간의 구별을 위한 최소한의 시간을 의미합니다.</li><li>통신 속도 57600bps에서 1bit의 전송 시간은 0.017msec이고, Start time이 3.5 character time(1 character = 8bit)임으로 최소 start time은 0.486msec 입니다.</li><li>Start time 이내의 다른 frame 이 전송되면, 이전 frame 의 연속된 데이터로 인식 합니다.</li></ul><h5 id="_2-1-2-2-address" tabindex="-1">2.1.2.2 Address <a class="header-anchor" href="#_2-1-2-2-address" aria-label="Permalink to &quot;2.1.2.2 Address&quot;">​</a></h5><ul><li>mightyZAP의 ID로 다중 연결 방식으로 Daisy Chain 연결 지원을 위한 식별자 입니다.</li><li>ID가 &#39;0&#39;일 경우 Broadcasting ID로 동작합니다.</li></ul><h5 id="_2-1-2-3-function-code" tabindex="-1">2.1.2.3 Function Code <a class="header-anchor" href="#_2-1-2-3-function-code" aria-label="Permalink to &quot;2.1.2.3 Function Code&quot;">​</a></h5><ul><li>mightyZAP에서 지원하는 Modbus-RTU 표준 Function code는 다음과 같습니다.</li></ul><table><thead><tr><th>Function</th><th>Code</th><th>Description</th></tr></thead><tbody><tr><td>Read Holding Register</td><td>0x03</td><td>mightyZAP의 Data를 읽어오기</td></tr><tr><td>Write Single Register</td><td>0x06</td><td>mightyZAP의 특정 주소에 Data값을 Setting 하기</td></tr><tr><td>Write Multiple Register</td><td>0x10</td><td>mightyZAP의 연속된 주소에 Data값을 Setting 하기</td></tr></tbody></table><h5 id="_2-1-2-4-data" tabindex="-1">2.1.2.4 Data <a class="header-anchor" href="#_2-1-2-4-data" aria-label="Permalink to &quot;2.1.2.4 Data&quot;">​</a></h5><p><b>송신</b></p><ul><li>Read Register 명령의 경우 Modbus 주소, 레지스터 개수, Byte 개수 등을 지정하게 되며, Write Register 명령의 경우 Modbus 주소, Byte 개수, 설정 할 값 등을 지정하게 됩니다.<br><b>수신</b></li><li>Read Register 명령의 경우, 정상 응답은 Node ID 와 Function Code 가 송신 때와 동일한 값으로 수신 되며, Data 는 송신 때 보낸 Register 순서에 따라 각 Register 의 값이 수신 됩니다.</li><li>Write Single Register 명령의 경우, 송신 때와 동일한 데이터가 수신됩니다. Write Multi Register 의 경우에는 Write Multi Register 명령으로 데이터를 쓰고자 한 Register 의 시작 주소와 Register 개수가 수신됩니다.</li><li>이상응답의 경우에는 Node ID, Error Code, Exception Code 로 구성되며, 이상응답의 패킷 구조는 Function Code 와 관계없이 모두 동일합니다.</li></ul><h5 id="_2-1-2-5-crc" tabindex="-1">2.1.2.5 CRC <a class="header-anchor" href="#_2-1-2-5-crc" aria-label="Permalink to &quot;2.1.2.5 CRC&quot;">​</a></h5><ul><li>16 비트 CRC 값을 입력하며 2 byte로 구성됩니다.</li><li>전송 순서는 하위 1byte, 상위 1byte순 입니다.</li><li>CRC Check Method 는 CRC-16(X^16 + X^15+X^2+1) 입니다 인터넷에서 CRC-16 Modbus 계산기를 검색하시어 사용하시면 쉽게 계산 값을 얻을 수 있습니다.</li></ul><h5 id="_2-1-2-6-exception-code" tabindex="-1">2.1.2.6 Exception Code <a class="header-anchor" href="#_2-1-2-6-exception-code" aria-label="Permalink to &quot;2.1.2.6 Exception Code&quot;">​</a></h5><ul><li>mightyZAP에서 지원하는 모든 Function Code 의 이상 응답에 대한 Exception Code 는 아래와 같이 정의되어 있습니다.</li></ul><table><thead><tr><th>Exception Code</th><th></th><th>Description</th></tr></thead><tbody><tr><td>0x01</td><td>Illegal Function</td><td>지원하지 않는 Function Code</td></tr><tr><td>0x02</td><td>Illegal Data Address</td><td>잘못된 레지스터 주소</td></tr><tr><td>0x03</td><td>Illegal Data Value</td><td>잘못된 데이터 값</td></tr><tr><td>0x04</td><td>Slave Device Failure</td><td>장치 고장, 파라미터 설정값 이상(ready)</td></tr><tr><td>0x05</td><td>Acknowledge</td><td>데이터가 준비되지 않은 상태(ready)</td></tr><tr><td>0x06</td><td>Slave Device Busy</td><td>파라미터 잠금 상태</td></tr></tbody></table><h3 id="_2-2-프로토콜-function-code-설명" tabindex="-1">2.2 프로토콜 Function Code 설명 <a class="header-anchor" href="#_2-2-프로토콜-function-code-설명" aria-label="Permalink to &quot;2.2 프로토콜 Function Code 설명&quot;">​</a></h3><h4 id="_2-2-1-read-holding-register-0x03" tabindex="-1">2.2.1 Read Holding Register (0x03) <a class="header-anchor" href="#_2-2-1-read-holding-register-0x03" aria-label="Permalink to &quot;2.2.1 Read Holding Register (0x03)&quot;">​</a></h4><p>단일 레지스터(16bit 데이터) 및 연속된 레지스터 블록(16bit 데이터 단위)의 값을 읽습니다.</p><h5 id="_2-2-1-1-packet-description" tabindex="-1">2.2.1.1 Packet Description <a class="header-anchor" href="#_2-2-1-1-packet-description" aria-label="Permalink to &quot;2.2.1.1 Packet Description&quot;">​</a></h5>',22)),e(i,{color:"#4f81bd"},{default:r(()=>t[34]||(t[34]=[d("b",null,"Request Frame",-1)])),_:1,__:[34]}),t[51]||(t[51]=l("<table><thead><tr><th></th><th>Address</th><th>Fucntion code</th><th>Starting Address</th><th>Quantity of Register</th><th>CRC</th></tr></thead><tbody><tr><td>Size(byte)</td><td>1 byte</td><td>1 byte</td><td>2 byte</td><td>2 byte</td><td>2 byte</td></tr><tr><td>Data</td><td></td><td>0x03</td><td>0x0000 to 0xffff</td><td>1 to 125(0x7d)</td><td></td></tr></tbody></table>",1)),e(i,{color:"#4f81bd"},{default:r(()=>t[35]||(t[35]=[d("b",null,"Request OK",-1)])),_:1,__:[35]}),t[52]||(t[52]=l("<table><thead><tr><th></th><th>Address</th><th>Fucntion code</th><th>Byte Count</th><th>Register Value</th><th>CRC</th></tr></thead><tbody><tr><td>Size(byte)</td><td>1 byte</td><td>1 byte</td><td>1 byte</td><td>N* x 2 bytes</td><td>2 byte</td></tr><tr><td>Data</td><td></td><td>0x03</td><td>2 x N*</td><td></td><td></td></tr></tbody></table><p>*N = Quantity of Registers</p>",2)),e(i,{color:"#4f81bd"},{default:r(()=>t[36]||(t[36]=[d("b",null,"Request not OK",-1)])),_:1,__:[36]}),t[53]||(t[53]=l('<table><thead><tr><th></th><th>Address</th><th>Error code</th><th>Exception Code</th><th>CRC</th></tr></thead><tbody><tr><td>Size(byte)</td><td>1 byte</td><td>1 byte</td><td>1 byte</td><td>2 byte</td></tr><tr><td>Data</td><td></td><td>0x83</td><td>0x01 to 0x06</td><td></td></tr></tbody></table><h5 id="_2-2-1-2-frame-detail" tabindex="-1">2.2.1.2 frame detail <a class="header-anchor" href="#_2-2-1-2-frame-detail" aria-label="Permalink to &quot;2.2.1.2 frame detail&quot;">​</a></h5><ul><li><strong>Address</strong><br> 데이터를 읽고 자 하는 mightyZAP의 ID를 의미 합니다.</li><li><strong>Function Code</strong> Read Holding Register 명령의 의미하는 code 0x03</li><li><strong>Starting Address</strong> 읽고자 하는 데이터의 시작 주소를 의미하며 2 byte로 구성됩니다.</li><li><strong>Quantity of Register</strong> 읽고자 하는 데이터의 크기를 의미하며 2 byte로 구성됩니다.</li><li><strong>CRC</strong> CRC 에러 체크 방법을 이용하며 2 byte로 구성됩니다.</li><li><strong>Byte Count</strong> 응답하는 데이터의 수를 의미 합니다.</li><li><strong>Register Value</strong> 요청 프레임의 Address를 시작 주소로 하여 바이트 단위로 데이터를 송신합니다. 이때 데이터는 워드 타입이므로 바이트 수에 2배를 해준 크기와 동일합니다.</li><li><strong>Error code</strong> Error code는 Function Code 에 80(Hex)값을 더하여 표현되며 Read Holding register의 경우 83(Hex)으로 전송됩니다.</li><li><strong>Exception code</strong> 상세 에러 내역을 의미하며 1바이트로 구성됩니다.</li></ul><h5 id="_2-2-1-3-example" tabindex="-1">2.2.1.3 Example <a class="header-anchor" href="#_2-2-1-3-example" aria-label="Permalink to &quot;2.2.1.3 Example&quot;">​</a></h5>',4)),e(i,{color:"#4f81bd"},{default:r(()=>t[37]||(t[37]=[d("b",null,"Example",-1)])),_:1,__:[37]}),t[54]||(t[54]=l(" #1 - Read Present Position (0xD2)<ul><li>Request</li></ul><table><thead><tr><th>Address</th><th>Fucntion <br>code</th><th>Starting <br>Address Hi</th><th>Starting <br>Address Lo</th><th>Quantity of Register Hi</th><th>Quantity of Register Lo</th><th>CRC Lo</th><th>CRC hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x03</td><td>0x00</td><td>0xD2</td><td>0x00</td><td>0x01</td><td>0x24</td><td>0x33</td></tr></tbody></table><ul><li>Request OK -Present Position Data :1000</li></ul><table><thead><tr><th>Address</th><th>Fucntion<br> code</th><th>Byte <br>Count</th><th>Register <br>value Hi</th><th>Register <br>value Lo</th><th>CRC <br>Lo</th><th>CRC <br>hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x03</td><td>0x02</td><td>0x03</td><td>0xe8</td><td>0xB8</td><td>0xFA</td></tr></tbody></table><ul><li>Request Not OK</li></ul><table><thead><tr><th>Address</th><th>Error<br> code</th><th>Exception <br>Code</th><th>CRC <br>Lo</th><th>CRC <br>hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x83</td><td>0x04</td><td>CRC <br>Lo</td><td>CRC <br>hi</td></tr></tbody></table>",7)),e(i,{color:"#4f81bd"},{default:r(()=>t[38]||(t[38]=[d("b",null,"Example",-1)])),_:1,__:[38]}),t[55]||(t[55]=l(' #2 - Read Present Current (0xD3)<ul><li>Request</li></ul><table><thead><tr><th>Address</th><th>Fucntion <br>code</th><th>Starting <br>Address Hi</th><th>Starting <br>Address Lo</th><th>Quantity of Register Hi</th><th>Quantity of Register Lo</th><th>CRC Lo</th><th>CRC hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x03</td><td>0x00</td><td>0xD3</td><td>0x00</td><td>0x01</td><td>0x75</td><td>0xf3</td></tr></tbody></table><ul><li>Request OK -Present Current Data : 426</li></ul><table><thead><tr><th>Address</th><th>Fucntion<br> code</th><th>Byte <br>Count</th><th>Register <br>value Hi</th><th>Register <br>value Lo</th><th>CRC <br>Lo</th><th>CRC <br>hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x03</td><td>0x02</td><td>0x01</td><td>0xAA</td><td>0x39</td><td>0xAB</td></tr></tbody></table><ul><li>Request Not OK</li></ul><table><thead><tr><th>Address</th><th>Error<br> code</th><th>Exception <br>Code</th><th>CRC <br>Lo</th><th>CRC <br>hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x83</td><td>0x04</td><td>0x40</td><td>0xF3</td></tr></tbody></table><h4 id="_2-2-2-write-single-register" tabindex="-1">2.2.2 Write Single Register <a class="header-anchor" href="#_2-2-2-write-single-register" aria-label="Permalink to &quot;2.2.2 Write Single Register&quot;">​</a></h4><p>단일레지스터(16bit 데이터)에 값을 씁니다.</p><h5 id="_2-2-2-1-packet-description" tabindex="-1">2.2.2.1 Packet Description <a class="header-anchor" href="#_2-2-2-1-packet-description" aria-label="Permalink to &quot;2.2.2.1 Packet Description&quot;">​</a></h5>',10)),e(i,{color:"#4f81bd"},{default:r(()=>t[39]||(t[39]=[d("b",null,"Request",-1)])),_:1,__:[39]}),t[56]||(t[56]=l(" <table><thead><tr><th></th><th>Address</th><th>Fucntion code</th><th>Register Addresse</th><th>Register Value</th><th>CRC</th></tr></thead><tbody><tr><td>Size(byte)</td><td>1 byte</td><td>1 byte</td><td>2 byte</td><td>2 byte</td><td>2 byte</td></tr><tr><td>Data</td><td></td><td>0x06</td><td>0x0000 to 0xffff</td><td>0x0000 to 0xffff</td><td></td></tr></tbody></table>",2)),e(i,{color:"#4f81bd"},{default:r(()=>t[40]||(t[40]=[d("b",null,"Request OK",-1)])),_:1,__:[40]}),t[57]||(t[57]=l(" <table><thead><tr><th></th><th>Address</th><th>Fucntion code</th><th>Register Addresse</th><th>Register Value</th><th>CRC</th></tr></thead><tbody><tr><td>Size(byte)</td><td>1 byte</td><td>1 byte</td><td>2 byte</td><td>2 byte</td><td>2 byte</td></tr><tr><td>Data</td><td></td><td>0x06</td><td>0x0000 to 0xffff</td><td>0x0000 to 0xffff</td><td></td></tr></tbody></table><p>*N = Quantity of Registers</p>",3)),e(i,{color:"#4f81bd"},{default:r(()=>t[41]||(t[41]=[d("b",null,"Request not OK",-1)])),_:1,__:[41]}),t[58]||(t[58]=l(' <table><thead><tr><th></th><th>Address</th><th>Error code</th><th>Exception Code</th><th>CRC</th></tr></thead><tbody><tr><td>Size(byte)</td><td>1 byte</td><td>1 byte</td><td>1 byte</td><td>2 byte</td></tr><tr><td>Data</td><td></td><td>0x86</td><td>0x01 to 0x06</td><td></td></tr></tbody></table><h5 id="_2-2-1-2-frame-detail-1" tabindex="-1">2.2.1.2 frame detail <a class="header-anchor" href="#_2-2-1-2-frame-detail-1" aria-label="Permalink to &quot;2.2.1.2 frame detail&quot;">​</a></h5><ul><li><strong>Address</strong> 데이터를 쓰려고하는 mightyZAP의 ID를 의미 합니다.</li><li><strong>Function Code</strong> Write Single Register 명령의 의미하는 code 0x06</li><li><strong>Register Addresse</strong> 쓰기 원하는 데이터의 주소를 의미하며 2 byte로 구성됩니다.</li><li><strong>Register Value</strong> 쓰기 원하는 데이터의 값으로 2 byte로 구성됩니다.</li><li><strong>CRC</strong> CRC 에러 체크 방법을 이용하며 2 byte로 구성됩니다.</li><li><strong>Error code</strong> Error code는 Function Code 에 80(Hex)값을 더하여 표현되며 Read Holding register의 경우 83(Hex)으로 전송됩니다.</li><li><strong>Exception code</strong> 상세 에러 내역을 의미하며 1바이트로 구성됩니다.</li></ul><h5 id="_2-2-2-2-example" tabindex="-1">2.2.2.2 Example <a class="header-anchor" href="#_2-2-2-2-example" aria-label="Permalink to &quot;2.2.2.2 Example&quot;">​</a></h5>',5)),e(i,{color:"#4f81bd"},{default:r(()=>t[42]||(t[42]=[d("b",null,"Example",-1)])),_:1,__:[42]}),t[59]||(t[59]=l(" #1 - Write Goal Position (0xCD)<ul><li>Request - Goal Position Data : 1000</li></ul><table><thead><tr><th>Address</th><th>Fucntion <br>code</th><th>Register<br>Address Hi</th><th>Register <br>Address Lo</th><th>Register Value Hi</th><th>Register Value Lo</th><th>CRC Lo</th><th>CRC hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x06</td><td>0x00</td><td>0xCD</td><td>0x03</td><td>0xE8</td><td>0x18</td><td>0x8B</td></tr></tbody></table><ul><li>Request OK</li></ul><table><thead><tr><th>Address</th><th>Fucntion <br>code</th><th>Register<br>Address Hi</th><th>Register <br>Address Lo</th><th>Register Value Hi</th><th>Register Value Lo</th><th>CRC Lo</th><th>CRC hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x06</td><td>0x00</td><td>0xCD</td><td>0x03</td><td>0xE8</td><td>0x18</td><td>0x8B</td></tr></tbody></table><ul><li>Request Not OK</li></ul><table><thead><tr><th>Address</th><th>Error<br> code</th><th>Exception <br>Code</th><th>CRC <br>Lo</th><th>CRC <br>hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x86</td><td>0x04</td><td>CRC <br>Lo</td><td>CRC <br>hi</td></tr></tbody></table>",7)),e(i,{color:"#4f81bd"},{default:r(()=>t[43]||(t[43]=[d("b",null,"Example",-1)])),_:1,__:[43]}),t[60]||(t[60]=l(' #2 - Write Goal Current (0xD3)<ul><li>Request - Goal Current Data : 800</li></ul><table><thead><tr><th>Address</th><th>Fucntion <br>code</th><th>Register<br>Address Hi</th><th>Register <br>Address Lo</th><th>Register Value Hi</th><th>Register Value Lo</th><th>CRC Lo</th><th>CRC hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x06</td><td>0x00</td><td>0xD1</td><td>0x03</td><td>0x20</td><td>0xD8</td><td>0xDB</td></tr></tbody></table><ul><li>Request OK</li></ul><table><thead><tr><th>Address</th><th>Fucntion <br>code</th><th>Starting <br>Address Hi</th><th>Starting <br>Address Lo</th><th>Quantity of Register Hi</th><th>Quantity of Register Lo</th><th>CRC Lo</th><th>CRC hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x06</td><td>0x00</td><td>0xD1</td><td>0x03</td><td>0x20</td><td>0xD8</td><td>0xDB</td></tr></tbody></table><ul><li>Request Not OK</li></ul><table><thead><tr><th>Address</th><th>Error<br> code</th><th>Exception <br>Code</th><th>CRC <br>Lo</th><th>CRC <br>hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x86</td><td>0x04</td><td>0x40</td><td>0xF3</td></tr></tbody></table><h4 id="_2-2-3-write-multi-register-0x10" tabindex="-1">2.2.3 Write Multi Register(0x10) <a class="header-anchor" href="#_2-2-3-write-multi-register-0x10" aria-label="Permalink to &quot;2.2.3 Write Multi Register(0x10)&quot;">​</a></h4><p>연속된 레지스터 블록(16bit 데이터 단위)에 값을 씁니다.</p><h5 id="_2-2-3-1-packet-description" tabindex="-1">2.2.3.1 Packet Description <a class="header-anchor" href="#_2-2-3-1-packet-description" aria-label="Permalink to &quot;2.2.3.1 Packet Description&quot;">​</a></h5>',10)),e(i,{color:"#4f81bd"},{default:r(()=>t[44]||(t[44]=[d("b",null,"Request",-1)])),_:1,__:[44]}),t[61]||(t[61]=l(" <table><thead><tr><th></th><th>Address</th><th>Fucntion code</th><th>Starting Address</th><th>Quantity of Register</th><th>Byte Count</th><th>Registers Value</th><th>CRC</th></tr></thead><tbody><tr><td>Size(byte)</td><td>1 byte</td><td>1 byte</td><td>2 bytes</td><td>2 bytes</td><td>1Byte</td><td>N* x 2 Bytes</td><td>2 byte</td></tr><tr><td>Data</td><td></td><td>0x10</td><td>0x0000 to 0xffff</td><td>0x0000 to 1 to 0x007B(123)</td><td>2 x N*</td><td>value</td><td></td></tr></tbody></table>",2)),e(i,{color:"#4f81bd"},{default:r(()=>t[45]||(t[45]=[d("b",null,"Request OK",-1)])),_:1,__:[45]}),t[62]||(t[62]=l(" <table><thead><tr><th></th><th>Address</th><th>Fucntion code</th><th>Starting Address</th><th>Quantity of Register</th><th>CRC</th></tr></thead><tbody><tr><td>Size(byte)</td><td>1 byte</td><td>1 byte</td><td>2 bytes</td><td>2 bytes</td><td>2 byte</td></tr><tr><td>Data</td><td></td><td>0x10</td><td>0x0000 to 0xffff</td><td>0x0000 to 1 to 0x007B(123)</td><td></td></tr></tbody></table><p>*N = Quantity of Registers</p>",3)),e(i,{color:"#4f81bd"},{default:r(()=>t[46]||(t[46]=[d("b",null,"Request not OK",-1)])),_:1,__:[46]}),t[63]||(t[63]=l(' <table><thead><tr><th></th><th>Address</th><th>Error code</th><th>Exception Code</th><th>CRC</th></tr></thead><tbody><tr><td>Size(byte)</td><td>1 byte</td><td>1 byte</td><td>1 byte</td><td>2 byte</td></tr><tr><td>Data</td><td></td><td>0x90</td><td>0x01 to 0x06</td><td></td></tr></tbody></table><h5 id="_2-2-3-2-frame-detail" tabindex="-1">2.2.3.2 frame detail <a class="header-anchor" href="#_2-2-3-2-frame-detail" aria-label="Permalink to &quot;2.2.3.2 frame detail&quot;">​</a></h5><ul><li><strong>Address</strong> 데이터를 쓰려고하는 mightyZAP의 ID를 의미 합니다.</li><li><strong>Function Code</strong> Write Multi Register 명령의 의미하는 code 0x10</li><li><strong>Start Addresse</strong> 연속해서 쓰기 원하는 데이터의 시작 주소를 의미하며 2 byte로 구성됩니다.</li><li><strong>Quantity of Register</strong> 쓰기 원하는 데이터의 크기를 의미하며 2 byte로 구성됩니다.</li><li><strong>Byte Count</strong> 연속해서 쓰기 원하는 데이터의 수를 의미 합니다.</li><li><strong>Registers Value</strong> 쓰기 원하는 데이터의 값으로 2 byte를 한 세트로 구성됩니다. Byte Count에 입력 한 수 만큼의 데이터 세트를 추가해야 합니다</li><li><strong>CRC</strong> CRC 에러 체크 방법을 이용하며 2 byte로 구성됩니다.</li><li><strong>Error code</strong> Error code는 Function Code 에 80(Hex)값을 더하여 표현되며 Read Holding register의 경우 0x90으로 전송됩니다.</li><li><strong>Exception code</strong> 상세 에러 내역을 의미하며 1바이트로 구성됩니다.</li></ul><h5 id="_2-2-3-3-example" tabindex="-1">2.2.3.3 Example <a class="header-anchor" href="#_2-2-3-3-example" aria-label="Permalink to &quot;2.2.3.3 Example&quot;">​</a></h5>',5)),e(i,{color:"#4f81bd"},{default:r(()=>t[47]||(t[47]=[d("b",null,"Example",-1)])),_:1,__:[47]}),t[64]||(t[64]=l(' #1 - Multi Write Goal Speed(0xD0) &amp; Goal Current (0xD1)<ul><li>Request - Goal Speed Data : 1000, Goal Current Data : 800</li></ul><table><thead><tr><th>Address</th><th>Fucntion <br>code</th><th>Starting<br>Address Hi</th><th>Starting <br>Address Lo</th><th>Quatity of Register Hi</th><th>Quatity of Register Lo</th><th>Byte<br>Count</th><th>Register<br>Value Hi</th><th>Register<br>Value Lo</th><th>Register<br>Value Hi</th><th>Register<br>Value Lo</th><th>CRC Lo</th><th>CRC hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x10</td><td>0x00</td><td>0xD0</td><td>0x00</td><td>0x02</td><td>0x04</td><td>0x03</td><td>0xE8</td><td>0x03</td><td>0x20</td><td>0x7F</td><td>0xAB</td></tr></tbody></table><ul><li>Request OK</li></ul><table><thead><tr><th>Address</th><th>Fucntion <br>code</th><th>Starting<br>Address Hi</th><th>Starting <br>Address Lo</th><th>Quatity of Register Hi</th><th>Quatity of Register Lo</th><th>CRC Lo</th><th>CRC hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x10</td><td>0x00</td><td>0xD0</td><td>0x00</td><td>0x02</td><td>0x40</td><td>0x31</td></tr></tbody></table><ul><li>Request Not OK</li></ul><table><thead><tr><th>Address</th><th>Error<br> code</th><th>Exception <br>Code</th><th>CRC <br>Lo</th><th>CRC <br>hi</th></tr></thead><tbody><tr><td>0x01</td><td>0x83</td><td>0x04</td><td>0x40</td><td>0xF3</td></tr></tbody></table><h2 id="_3-packet-test" tabindex="-1">3. Packet Test <a class="header-anchor" href="#_3-packet-test" aria-label="Permalink to &quot;3. Packet Test&quot;">​</a></h2>',8))])}const T=n(x,[["render",C]]);export{p as __pageData,T as default};
